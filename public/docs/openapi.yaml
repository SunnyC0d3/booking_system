openapi: 3.0.3
info:
  title: 'E-Commerce API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://marketplace.com'
paths:
  /api/register:
    post:
      summary: 'Register a new user and return their API token.'
      operationId: registerANewUserAndReturnTheirAPIToken
      description: "This endpoint is used to register a new user, including their name, email, password,\nand password confirmation."
      parameters:
        -
          in: header
          name: X-Hmac
          description: ''
          example: 'HMAC signature of the request payload done via sha256.'
          schema:
            type: string
        -
          in: header
          name: X-Timestamp
          description: ''
          example: 'Timestamp + Request body.'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'User registered successfully'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'User registered successfully'
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The user's full name."
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: "The user's email address."
                  example: john.doe@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password. Must be at least 8 characters."
                  example: password123
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match the password field.'
                  example: password123
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/login:
    post:
      summary: 'Login a user.'
      operationId: loginAUser
      description: 'Authenticates a user with email and password. Returns an API token with expiry timer.'
      parameters:
        -
          in: header
          name: X-Hmac
          description: ''
          example: 'HMAC signature of the request payload done via sha256.'
          schema:
            type: string
        -
          in: header
          name: X-Timestamp
          description: ''
          example: 'Timestamp + Request body.'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"data\": {\n      \"token_type\": \"Bearer,\n      \"token\": \"{YOUR_AUTH_KEY}\",\n      \"expires_in\": \"{YOUR_EXPIRY_TIMER}\"\n  },\n  \"message\": \"Authenticated\",\n  \"status\": 200\n}"
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid credentials'
                  status: 401
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
                  status:
                    type: integer
                    example: 401
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email."
                  example: john.doe@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password."
                  example: password123
                  nullable: false
                remember:
                  type: boolean
                  description: 'optional Whether to remember the user.'
                  example: true
                  nullable: true
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Logout a user.'
      operationId: logoutAUser
      description: 'Logs out the currently authenticated user by invalidating their API token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User logged out successfully'
                  status: 200
                properties:
                  message:
                    type: string
                    example: 'User logged out successfully'
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
  '/api/email/verify/{id}/{hash}':
    get:
      summary: "Verify a user's email address."
      operationId: verifyAUsersEmailAddress
      description: 'Once a user registers, a notification is sent out to their specified email address, which requires them to verify.'
      parameters:
        -
          in: query
          name: id
          description: "The user's id."
          example: '1'
          required: true
          schema:
            type: string
            description: "The user's id."
            example: '1'
            nullable: false
        -
          in: query
          name: hash
          description: 'The hash to verify the email.'
          example: '1234567890'
          required: true
          schema:
            type: string
            description: 'The hash to verify the email.'
            example: '1234567890'
            nullable: false
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: 'Redirected to specified URL'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid/Expired url provided.'
                  status: 401
                properties:
                  message:
                    type: string
                    example: 'Invalid/Expired url provided.'
                  status:
                    type: integer
                    example: 401
      tags:
        - 'Email Verification'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify.'
        example: consequuntur
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: ''
        example: earum
        required: true
        schema:
          type: string
  /api/email/resend:
    get:
      summary: 'Resend email to user.'
      operationId: resendEmailToUser
      description: 'Once a user registers, a notification is sent out to their specified email address, which requires them to verify. Incase they dont recieve one, they can request again.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email verification link sent on your email id.'
                  status: 200
                properties:
                  message:
                    type: string
                    example: 'Email verification link sent on your email id.'
                  status:
                    type: integer
                    example: 200
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email already verified.'
                  status: 400
                properties:
                  message:
                    type: string
                    example: 'Email already verified.'
                  status:
                    type: integer
                    example: 400
      tags:
        - 'Email Verification'
  /api/forgot-password:
    post:
      summary: 'Request a password reset link.'
      operationId: requestAPasswordResetLink
      description: 'Sends a password reset email to the specified email address.'
      parameters:
        -
          in: header
          name: X-Hmac
          description: ''
          example: 'HMAC signature of the request payload done via sha256.'
          schema:
            type: string
        -
          in: header
          name: X-Timestamp
          description: ''
          example: 'Timestamp + Request body.'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password reset link sent.'
                  status: 200
                properties:
                  message:
                    type: string
                    example: 'Password reset link sent.'
                  status:
                    type: integer
                    example: 200
        400:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\": {ERROR_MESSAGE},\n  \"status\": 400\n}"
      tags:
        - 'Password Reset'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email address."
                  example: john.doe@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/reset-password:
    post:
      summary: "Reset a user's password."
      operationId: resetAUsersPassword
      description: "Resets the user's password using the provided reset token."
      parameters:
        -
          in: header
          name: X-Hmac
          description: ''
          example: 'HMAC signature of the request payload done via sha256.'
          schema:
            type: string
        -
          in: header
          name: X-Timestamp
          description: ''
          example: 'Timestamp + Request body.'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password has been reset.'
                  status: 200
                properties:
                  message:
                    type: string
                    example: 'Password has been reset.'
                  status:
                    type: integer
                    example: 200
        400:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n  \"message\": {ERROR_MESSAGE},\n  \"status\": 400\n}"
      tags:
        - 'Password Reset'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The password reset token.'
                  example: abc123
                  nullable: false
                email:
                  type: string
                  description: "The user's email address."
                  example: john.doe@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The new password.'
                  example: newpassword123
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Must match the password.'
                  example: newpassword123
                  nullable: false
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
tags:
  -
    name: Authentication
    description: ''
  -
    name: 'Email Verification'
    description: ''
  -
    name: 'Password Reset'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by making sure **PASSPORT_PERSONAL_ACCESS_CLIENT_ID** and **PASSPORT_PERSONAL_ACCESS_CLIENT_SECRET** are included and a personal token is issued to create user tokens. Most paths will only need **HMAC** verification, this ensures all paths are secure.'
security:
  -
    default: []
