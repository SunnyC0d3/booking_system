## Autogenerated by Scribe. DO NOT MODIFY.

name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/register
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new user'
      description: |-
        Creates a new user account with email verification. The user will receive an email to verify their account.
        Passwords must meet security requirements including minimum length, character diversity, and cannot be common passwords.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "The user's full name."
        required: true
        example: 'John Doe'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address. Must be unique."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password. Must be at least 12 characters with uppercase, lowercase, numbers, and symbols."
        required: true
        example: MySecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Password confirmation. Must match the password field.'
        required: true
        example: MySecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'John Doe'
      email: john@example.com
      password: MySecurePass123!
      password_confirmation: MySecurePass123!
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [],
            "message": "User registered successfully.",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "Password does not meet security requirements.",
            "errors": [
              "Password must contain at least 1 uppercase letter(s).",
              "Password cannot contain common words or patterns that are not secure."
            ],
            "strength": {
              "score": 45,
              "strength": "medium",
              "feedback": ["Add special characters", "Use more unique characters"]
            }
          }
        headers: []
        description: ''
        custom: []
      -
        status: 423
        content: |-
          {
            "message": "Registration temporarily blocked. Please try again later.",
            "time_remaining_minutes": 15
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/login
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User login'
      description: 'Authenticates a user and returns an access token. Implements account lockout protection and tracks failed attempts.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: "The user's password."
        required: true
        example: MySecurePass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      remember:
        name: remember
        description: 'optional Whether to remember the user for extended period.'
        required: false
        example: true
        type: boolean
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
    cleanBodyParameters:
      email: john@example.com
      password: MySecurePass123!
      remember: true
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "token_type": "Bearer",
              "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...",
              "expires_at": 1640995200,
              "user": {
                "id": 1,
                "email": "john@example.com",
                "role": "user"
              }
            },
            "message": "User logged in successfully.",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Invalid credentials"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 423
        content: |-
          {
            "message": "Account is temporarily locked due to multiple failed login attempts.",
            "locked_until": "2024-01-15T15:30:00.000000Z",
            "time_remaining_seconds": 1800,
            "time_remaining_minutes": 30,
            "lockout_count": 2
          }
        headers: []
        description: ''
        custom: []
      -
        status: 426
        content: |-
          {
            "message": "Your password has expired and must be changed before logging in.",
            "password_expired": true,
            "change_password_required": true
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/logout
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'User logout'
      description: 'Logs out the authenticated user and revokes their access token.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [],
            "message": "User logged out successfully",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/change-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change password'
      description: "Changes the authenticated user's password. Requires current password verification and validates new password strength."
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: "The user's current password."
        required: true
        example: MyOldPass123!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'The new password. Must meet security requirements.'
        required: true
        example: MyNewSecurePass456!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      new_password_confirmation:
        name: new_password_confirmation
        description: 'Confirmation of the new password.'
        required: true
        example: MyNewSecurePass456!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: MyOldPass123!
      new_password: MyNewSecurePass456!
      new_password_confirmation: MyNewSecurePass456!
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "password_strength": {
                "score": 85,
                "strength": "very strong",
                "feedback": []
              },
              "security_score": {
                "score": 95,
                "level": "excellent",
                "issues": []
              }
            },
            "message": "Password changed successfully",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 401
        content: |-
          {
            "message": "Current password is incorrect"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "New password does not meet security requirements.",
            "errors": [
              "Password cannot be the same as your last 5 passwords."
            ],
            "strength": {
              "score": 45,
              "strength": "medium",
              "feedback": ["Add special characters"]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/security-info
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get security information'
      description: 'Retrieves comprehensive security information for the authenticated user including account lock status, security score, and password expiry details.'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": {
              "account_lock": {
                "is_locked": false,
                "failed_attempts": 0,
                "max_attempts": 5,
                "lockout_count": 0,
                "locked_until": null,
                "time_until_unlock": null,
                "last_attempt_at": null,
                "last_successful_login": "2024-01-15T10:30:00.000000Z",
                "should_reset": false
              },
              "security_score": {
                "score": 85,
                "level": "good",
                "issues": ["Medium strength password"]
              },
              "password_expiry": {
                "requires_change": false,
                "days_until_expiry": 45,
                "last_changed": "2024-01-01T12:00:00.000000Z"
              },
              "login_history": {
                "last_login": "2024-01-15T10:30:00.000000Z",
                "last_login_ip": "192.168.1.100"
              }
            },
            "message": "Security information retrieved",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/forgot-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Forgot password'
      description: "Sends a password reset link to the user's email address."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: "The user's email address."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      email: john@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [],
            "message": "We have emailed your password reset link!",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 423
        content: |-
          {
            "message": "Password reset temporarily blocked. Please try again later."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/reset-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset password'
      description: "Resets the user's password using a valid reset token from the forgot password email."
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      token:
        name: token
        description: 'The password reset token from the email.'
        required: true
        example: abc123def456
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      email:
        name: email
        description: "The user's email address."
        required: true
        example: john@example.com
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password. Must meet security requirements.'
        required: true
        example: MyNewSecurePass456!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Confirmation of the new password.'
        required: true
        example: MyNewSecurePass456!
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      token: abc123def456
      email: john@example.com
      password: MyNewSecurePass456!
      password_confirmation: MyNewSecurePass456!
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [],
            "message": "Your password has been reset!",
            "status": 200
          }
        headers: []
        description: ''
        custom: []
      -
        status: 422
        content: |-
          {
            "message": "New password does not meet security requirements.",
            "errors": [
              "Password must contain at least 1 special character(s)."
            ],
            "strength": {
              "score": 60,
              "strength": "strong",
              "feedback": ["Add special characters"]
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
