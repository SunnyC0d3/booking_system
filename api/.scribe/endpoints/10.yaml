name: 'Order Management'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/admin/orders
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Retrieve paginated list of orders'
      description: |-
        Get a paginated list of all orders in the system. This endpoint supports filtering by user and status,
        and includes comprehensive order information including items, user details, and current status.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      user_id:
        name: user_id
        description: 'optional Filter orders by specific user ID.'
        required: false
        example: 123
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status_id:
        name: status_id
        description: 'optional Filter orders by specific status ID.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      page:
        name: page
        description: 'optional Page number for pagination. Default: 1.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'optional Number of orders per page (max 50). Default: 15.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      user_id: 123
      status_id: 2
      page: 1
      per_page: 20
    bodyParameters:
      user_id:
        name: user_id
        description: 'The <code>id</code> of an existing record in the users table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      status_id:
        name: status_id
        description: 'The <code>id</code> of an existing record in the order_statuses table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Orders retrieved successfully.",
            "data": {
              "data": [
                {
                  "id": 1,
                  "total_amount": 29.99,
                  "total_amount_formatted": "£29.99",
                  "created_at": "2025-01-15T10:30:00.000000Z",
                  "updated_at": "2025-01-15T10:35:00.000000Z",
                  "deleted_at": null,
                  "user": {
                    "id": 5,
                    "name": "John Smith",
                    "email": "john.smith@example.com",
                    "email_verified_at": "2025-01-10T08:00:00.000000Z"
                  },
                  "status": {
                    "id": 2,
                    "name": "Processing"
                  },
                  "order_items": [
                    {
                      "id": 1,
                      "quantity": 2,
                      "price": 1499,
                      "price_formatted": "£14.99",
                      "line_total": 2998,
                      "line_total_formatted": "£29.98",
                      "product": {
                        "id": 10,
                        "name": "Wireless Headphones",
                        "description": "High-quality wireless headphones with noise cancellation"
                      },
                      "product_variant": {
                        "id": 3,
                        "value": "Black",
                        "additional_price": 0,
                        "product_attribute": {
                          "id": 1,
                          "name": "Color"
                        }
                      },
                      "order_return": null
                    }
                  ],
                  "payments": [
                    {
                      "id": 1,
                      "amount": 2999,
                      "amount_formatted": "£29.99",
                      "status": "Paid",
                      "method": "stripe",
                      "transaction_reference": "pi_1234567890abcdef",
                      "processed_at": "2025-01-15T10:32:00.000000Z"
                    }
                  ]
                }
              ],
              "current_page": 1,
              "per_page": 15,
              "total": 42,
              "last_page": 3,
              "from": 1,
              "to": 15
            }
          }
        headers: []
        description: 'Success with orders'
        custom: []
      -
        status: 200
        content: |-
          {
            "message": "Orders retrieved successfully.",
            "data": {
              "data": [],
              "current_page": 1,
              "per_page": 15,
              "total": 0,
              "last_page": 1,
              "from": null,
              "to": null
            }
          }
        headers: []
        description: 'No orders found'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": [
              "The user id field must be an integer.",
              "The status id field must exist in order_statuses table."
            ]
          }
        headers: []
        description: 'Invalid filter parameters'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/admin/orders
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new order'
      description: |-
        Create a new order with multiple order items. The system will automatically calculate the total amount
        based on the items and their quantities. All monetary values should be provided in pennies.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'The ID of the user placing the order.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status_id:
        name: status_id
        description: 'optional The initial status ID for the order. If not provided, defaults to "Pending Payment".'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      order_items:
        name: order_items
        description: 'Array of order items. Must contain at least one item.'
        required: true
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items[].product_id':
        name: 'order_items[].product_id'
        description: 'The <code>id</code> of an existing record in the products table.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items[].product_variant_id':
        name: 'order_items[].product_variant_id'
        description: 'The <code>id</code> of an existing record in the product_variants table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      'order_items[].quantity':
        name: 'order_items[].quantity'
        description: 'Must be at least 1.'
        required: true
        example: 22
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items[].price':
        name: 'order_items[].price'
        description: 'Must be at least 0.'
        required: true
        example: 84
        type: number
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items.*.product_id':
        name: 'order_items.*.product_id'
        description: 'The ID of the product being ordered.'
        required: true
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'order_items.*.product_variant_id':
        name: 'order_items.*.product_variant_id'
        description: 'optional The ID of the product variant (if applicable).'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'order_items.*.quantity':
        name: 'order_items.*.quantity'
        description: 'The quantity of this item (minimum 1).'
        required: true
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'order_items.*.price':
        name: 'order_items.*.price'
        description: 'The price per item in pounds (will be converted to pennies).'
        required: true
        example: '14.99'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      user_id: 5
      status_id: 1
      order_items:
        - architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order created successfully.",
            "data": {
              "id": 43,
              "total_amount": 2999,
              "total_amount_formatted": "£29.99",
              "created_at": "2025-01-15T14:20:00.000000Z",
              "updated_at": "2025-01-15T14:20:00.000000Z",
              "deleted_at": null,
              "user": {
                "id": 5,
                "name": "John Smith",
                "email": "john.smith@example.com"
              },
              "status": {
                "id": 1,
                "name": "Pending Payment"
              },
              "order_items": [
                {
                  "id": 85,
                  "quantity": 2,
                  "price": 1499,
                  "price_formatted": "£14.99",
                  "line_total": 2998,
                  "line_total_formatted": "£29.98",
                  "product": {
                    "id": 10,
                    "name": "Wireless Headphones",
                    "price": 1499,
                    "price_formatted": "£14.99"
                  },
                  "product_variant": {
                    "id": 3,
                    "value": "Black",
                    "additional_price": 0
                  }
                }
              ],
              "payments": []
            }
          }
        headers: []
        description: 'Order created successfully'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "The selected user id is invalid."
          }
        headers: []
        description: 'User not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": [
              "The user id field is required.",
              "The order items field is required.",
              "The order items.0.product id field is required.",
              "The order items.0.quantity must be at least 1.",
              "The order items.0.price must be greater than 0."
            ]
          }
        headers: []
        description: 'Validation errors'
        custom: []
      -
        status: 500
        content: |-
          {
            "message": "An error occurred while creating the order."
          }
        headers: []
        description: 'Server error'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/admin/orders/{id}'
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Retrieve a specific order'
      description: |-
        Get detailed information about a specific order including all order items, user details,
        payment information, and any associated returns or refunds.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the order.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      order:
        name: order
        description: 'The ID of the order to retrieve.'
        required: true
        example: 43
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      order: 43
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order retrieved successfully.",
            "data": {
              "id": 43,
              "total_amount": 5998,
              "total_amount_formatted": "£59.98",
              "created_at": "2025-01-15T14:20:00.000000Z",
              "updated_at": "2025-01-15T14:25:00.000000Z",
              "deleted_at": null,
              "user": {
                "id": 5,
                "name": "John Smith",
                "email": "john.smith@example.com",
                "email_verified_at": "2025-01-10T08:00:00.000000Z"
              },
              "status": {
                "id": 3,
                "name": "Confirmed"
              },
              "order_items": [
                {
                  "id": 85,
                  "quantity": 2,
                  "price": 1499,
                  "price_formatted": "£14.99",
                  "line_total": 2998,
                  "line_total_formatted": "£29.98",
                  "created_at": "2025-01-15T14:20:00.000000Z",
                  "product": {
                    "id": 10,
                    "name": "Wireless Headphones",
                    "description": "High-quality wireless headphones with noise cancellation",
                    "price": 1499,
                    "price_formatted": "£14.99"
                  },
                  "product_variant": {
                    "id": 3,
                    "value": "Black",
                    "additional_price": 0,
                    "product_attribute": {
                      "id": 1,
                      "name": "Color"
                    }
                  },
                  "order_return": {
                    "id": 12,
                    "reason": "Product arrived damaged",
                    "status": {
                      "id": 1,
                      "name": "Requested"
                    },
                    "created_at": "2025-01-16T09:15:00.000000Z"
                  }
                },
                {
                  "id": 86,
                  "quantity": 1,
                  "price": 2999,
                  "price_formatted": "£29.99",
                  "line_total": 2999,
                  "line_total_formatted": "£29.99",
                  "created_at": "2025-01-15T14:20:00.000000Z",
                  "product": {
                    "id": 15,
                    "name": "Bluetooth Speaker",
                    "description": "Portable waterproof Bluetooth speaker",
                    "price": 2999,
                    "price_formatted": "£29.99"
                  },
                  "product_variant": null,
                  "order_return": null
                }
              ],
              "payments": [
                {
                  "id": 25,
                  "amount": 5998,
                  "amount_formatted": "£59.98",
                  "status": "Paid",
                  "method": "stripe",
                  "transaction_reference": "pi_1234567890abcdef",
                  "processed_at": "2025-01-15T14:22:00.000000Z",
                  "created_at": "2025-01-15T14:21:00.000000Z"
                }
              ]
            }
          }
        headers: []
        description: 'Order found'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Order] 999"
          }
        headers: []
        description: 'Order not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/admin/orders/{id}'
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an existing order'
      description: |-
        Update an existing order including its items. This will replace all existing order items with the new ones
        and recalculate the total amount. Use with caution as this will affect order history.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the order.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      order:
        name: order
        description: 'The ID of the order to update.'
        required: true
        example: 43
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      order: 43
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      user_id:
        name: user_id
        description: 'optional The ID of the user (can be changed if needed).'
        required: false
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      status_id:
        name: status_id
        description: 'optional The new status ID for the order.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: true
        custom: []
      order_items:
        name: order_items
        description: 'Array of order items (replaces existing items).'
        required: true
        example:
          - architecto
        type: 'string[]'
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items[].product_id':
        name: 'order_items[].product_id'
        description: 'The <code>id</code> of an existing record in the products table.'
        required: true
        example: architecto
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items[].product_variant_id':
        name: 'order_items[].product_variant_id'
        description: 'The <code>id</code> of an existing record in the product_variants table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      'order_items[].quantity':
        name: 'order_items[].quantity'
        description: 'Must be at least 1.'
        required: true
        example: 22
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items[].price':
        name: 'order_items[].price'
        description: 'Must be at least 0.'
        required: true
        example: 84
        type: number
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      'order_items.*.product_id':
        name: 'order_items.*.product_id'
        description: 'The ID of the product.'
        required: true
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'order_items.*.product_variant_id':
        name: 'order_items.*.product_variant_id'
        description: 'optional The ID of the product variant.'
        required: false
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'order_items.*.quantity':
        name: 'order_items.*.quantity'
        description: 'The quantity (minimum 1).'
        required: true
        example: 3
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      'order_items.*.price':
        name: 'order_items.*.price'
        description: 'The price per item in pounds.'
        required: true
        example: '14.99'
        type: numeric
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanBodyParameters:
      user_id: 5
      status_id: 2
      order_items:
        - architecto
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order updated successfully.",
            "data": {
              "id": 43,
              "total_amount": 4497,
              "total_amount_formatted": "£44.97",
              "created_at": "2025-01-15T14:20:00.000000Z",
              "updated_at": "2025-01-15T15:30:00.000000Z",
              "deleted_at": null,
              "user": {
                "id": 5,
                "name": "John Smith",
                "email": "john.smith@example.com"
              },
              "status": {
                "id": 2,
                "name": "Processing"
              },
              "order_items": [
                {
                  "id": 87,
                  "quantity": 3,
                  "price": 1499,
                  "price_formatted": "£14.99",
                  "line_total": 4497,
                  "line_total_formatted": "£44.97",
                  "product": {
                    "id": 10,
                    "name": "Wireless Headphones"
                  }
                }
              ],
              "payments": []
            }
          }
        headers: []
        description: 'Order updated successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Cannot update order that has been shipped or completed."
          }
        headers: []
        description: 'Order cannot be updated'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Order] 999"
          }
        headers: []
        description: 'Order not found'
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": [
              "The order items field is required.",
              "The order items.0.quantity must be at least 1."
            ]
          }
        headers: []
        description: 'Validation errors'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/admin/orders/{id}'
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Soft delete an order'
      description: |-
        Soft delete an order, making it inactive but preserving the data for audit purposes.
        The order will be hidden from normal queries but can be restored if needed.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the order.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      order:
        name: order
        description: 'The ID of the order to soft delete.'
        required: true
        example: 43
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      order: 43
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order deleted (soft)."
          }
        headers: []
        description: 'Order soft deleted successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Cannot delete order with active payments or shipments."
          }
        headers: []
        description: 'Order cannot be deleted'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Order] 999"
          }
        headers: []
        description: 'Order not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/admin/orders/{id}/force-delete'
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Permanently delete an order'
      description: |-
        Permanently remove an order from the database. This action is irreversible and should be used
        with extreme caution. The order must be soft deleted first before it can be permanently deleted.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the soft deleted order to permanently delete.'
        required: true
        example: 43
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 43
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order permanently deleted."
          }
        headers: []
        description: 'Order permanently deleted'
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Order must be soft deleted before force deleting."
          }
        headers: []
        description: 'Order must be soft deleted first'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Order] 43"
          }
        headers: []
        description: 'Order not found'
        custom: []
      -
        status: 409
        content: |-
          {
            "message": "Cannot permanently delete order with associated payments or returns."
          }
        headers: []
        description: 'Order has dependencies'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PATCH
    uri: 'api/admin/orders/{id}/restore'
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Restore a soft deleted order'
      description: |-
        Restore a previously soft deleted order, making it active again in the system.
        Only orders that have been soft deleted can be restored.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the soft deleted order to restore.'
        required: true
        example: 43
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 43
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order restored successfully.",
            "data": {
              "id": 43,
              "total_amount": 2999,
              "total_amount_formatted": "£29.99",
              "created_at": "2025-01-15T14:20:00.000000Z",
              "updated_at": "2025-01-15T16:45:00.000000Z",
              "deleted_at": null,
              "user": {
                "id": 5,
                "name": "John Smith",
                "email": "john.smith@example.com"
              },
              "status": {
                "id": 1,
                "name": "Pending Payment"
              }
            }
          }
        headers: []
        description: 'Order restored successfully'
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Order is not deleted."
          }
        headers: []
        description: 'Order not deleted'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Order] 43"
          }
        headers: []
        description: 'Order not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/orders
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Retrieve paginated list of orders'
      description: |-
        Get a paginated list of all orders in the system. This endpoint supports filtering by user and status,
        and includes comprehensive order information including items, user details, and current status.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      user_id:
        name: user_id
        description: 'optional Filter orders by specific user ID.'
        required: false
        example: 123
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      status_id:
        name: status_id
        description: 'optional Filter orders by specific status ID.'
        required: false
        example: 2
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      page:
        name: page
        description: 'optional Page number for pagination. Default: 1.'
        required: false
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      per_page:
        name: per_page
        description: 'optional Number of orders per page (max 50). Default: 15.'
        required: false
        example: 20
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      user_id: 123
      status_id: 2
      page: 1
      per_page: 20
    bodyParameters:
      user_id:
        name: user_id
        description: 'The <code>id</code> of an existing record in the users table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
      status_id:
        name: status_id
        description: 'The <code>id</code> of an existing record in the order_statuses table.'
        required: false
        example: null
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: true
        custom: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Orders retrieved successfully.",
            "data": {
              "data": [
                {
                  "id": 1,
                  "total_amount": 29.99,
                  "total_amount_formatted": "£29.99",
                  "created_at": "2025-01-15T10:30:00.000000Z",
                  "updated_at": "2025-01-15T10:35:00.000000Z",
                  "deleted_at": null,
                  "user": {
                    "id": 5,
                    "name": "John Smith",
                    "email": "john.smith@example.com",
                    "email_verified_at": "2025-01-10T08:00:00.000000Z"
                  },
                  "status": {
                    "id": 2,
                    "name": "Processing"
                  },
                  "order_items": [
                    {
                      "id": 1,
                      "quantity": 2,
                      "price": 1499,
                      "price_formatted": "£14.99",
                      "line_total": 2998,
                      "line_total_formatted": "£29.98",
                      "product": {
                        "id": 10,
                        "name": "Wireless Headphones",
                        "description": "High-quality wireless headphones with noise cancellation"
                      },
                      "product_variant": {
                        "id": 3,
                        "value": "Black",
                        "additional_price": 0,
                        "product_attribute": {
                          "id": 1,
                          "name": "Color"
                        }
                      },
                      "order_return": null
                    }
                  ],
                  "payments": [
                    {
                      "id": 1,
                      "amount": 2999,
                      "amount_formatted": "£29.99",
                      "status": "Paid",
                      "method": "stripe",
                      "transaction_reference": "pi_1234567890abcdef",
                      "processed_at": "2025-01-15T10:32:00.000000Z"
                    }
                  ]
                }
              ],
              "current_page": 1,
              "per_page": 15,
              "total": 42,
              "last_page": 3,
              "from": 1,
              "to": 15
            }
          }
        headers: []
        description: 'Success with orders'
        custom: []
      -
        status: 200
        content: |-
          {
            "message": "Orders retrieved successfully.",
            "data": {
              "data": [],
              "current_page": 1,
              "per_page": 15,
              "total": 0,
              "last_page": 1,
              "from": null,
              "to": null
            }
          }
        headers: []
        description: 'No orders found'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 422
        content: |-
          {
            "errors": [
              "The user id field must be an integer.",
              "The status id field must exist in order_statuses table."
            ]
          }
        headers: []
        description: 'Invalid filter parameters'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/orders/{id}'
    metadata:
      groupName: 'Order Management'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Retrieve a specific order'
      description: |-
        Get detailed information about a specific order including all order items, user details,
        payment information, and any associated returns or refunds.
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_TOKEN}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the order.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      order:
        name: order
        description: 'The ID of the order to retrieve.'
        required: true
        example: 43
        type: integer
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 1
      order: 43
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "message": "Order retrieved successfully.",
            "data": {
              "id": 43,
              "total_amount": 5998,
              "total_amount_formatted": "£59.98",
              "created_at": "2025-01-15T14:20:00.000000Z",
              "updated_at": "2025-01-15T14:25:00.000000Z",
              "deleted_at": null,
              "user": {
                "id": 5,
                "name": "John Smith",
                "email": "john.smith@example.com",
                "email_verified_at": "2025-01-10T08:00:00.000000Z"
              },
              "status": {
                "id": 3,
                "name": "Confirmed"
              },
              "order_items": [
                {
                  "id": 85,
                  "quantity": 2,
                  "price": 1499,
                  "price_formatted": "£14.99",
                  "line_total": 2998,
                  "line_total_formatted": "£29.98",
                  "created_at": "2025-01-15T14:20:00.000000Z",
                  "product": {
                    "id": 10,
                    "name": "Wireless Headphones",
                    "description": "High-quality wireless headphones with noise cancellation",
                    "price": 1499,
                    "price_formatted": "£14.99"
                  },
                  "product_variant": {
                    "id": 3,
                    "value": "Black",
                    "additional_price": 0,
                    "product_attribute": {
                      "id": 1,
                      "name": "Color"
                    }
                  },
                  "order_return": {
                    "id": 12,
                    "reason": "Product arrived damaged",
                    "status": {
                      "id": 1,
                      "name": "Requested"
                    },
                    "created_at": "2025-01-16T09:15:00.000000Z"
                  }
                },
                {
                  "id": 86,
                  "quantity": 1,
                  "price": 2999,
                  "price_formatted": "£29.99",
                  "line_total": 2999,
                  "line_total_formatted": "£29.99",
                  "created_at": "2025-01-15T14:20:00.000000Z",
                  "product": {
                    "id": 15,
                    "name": "Bluetooth Speaker",
                    "description": "Portable waterproof Bluetooth speaker",
                    "price": 2999,
                    "price_formatted": "£29.99"
                  },
                  "product_variant": null,
                  "order_return": null
                }
              ],
              "payments": [
                {
                  "id": 25,
                  "amount": 5998,
                  "amount_formatted": "£59.98",
                  "status": "Paid",
                  "method": "stripe",
                  "transaction_reference": "pi_1234567890abcdef",
                  "processed_at": "2025-01-15T14:22:00.000000Z",
                  "created_at": "2025-01-15T14:21:00.000000Z"
                }
              ]
            }
          }
        headers: []
        description: 'Order found'
        custom: []
      -
        status: 403
        content: |-
          {
            "message": "You do not have the required permissions."
          }
        headers: []
        description: 'Insufficient permissions'
        custom: []
      -
        status: 404
        content: |-
          {
            "message": "No query results for model [App\\Models\\Order] 999"
          }
        headers: []
        description: 'Order not found'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
