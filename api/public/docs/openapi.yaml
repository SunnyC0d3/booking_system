openapi: 3.0.3
info:
  title: 'E-Commerce API Documentation'
  description: 'Comprehensive API for managing products, orders, payments, users, vendors, and more in an e-commerce platform.'
  version: 1.0.0
  contact:
    name: 'API Support'
    email: support@example.com
servers:
  -
    url: 'http://marketplace.com'
paths:
  /api/register:
    post:
      summary: 'Register a new user'
      operationId: registerANewUser
      description: "Creates a new user account with email verification. The user will receive an email to verify their account.\nPasswords must meet security requirements including minimum length, character diversity, and cannot be common passwords."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'User registered successfully.'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'User registered successfully.'
                  status:
                    type: integer
                    example: 200
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password does not meet security requirements.'
                  errors:
                    - 'Password must contain at least 1 uppercase letter(s).'
                    - 'Password cannot contain common words or patterns that are not secure.'
                  strength:
                    score: 45
                    strength: medium
                    feedback:
                      - 'Add special characters'
                      - 'Use more unique characters'
                properties:
                  message:
                    type: string
                    example: 'Password does not meet security requirements.'
                  errors:
                    type: array
                    example:
                      - 'Password must contain at least 1 uppercase letter(s).'
                      - 'Password cannot contain common words or patterns that are not secure.'
                    items:
                      type: string
                  strength:
                    type: object
                    properties:
                      score:
                        type: integer
                        example: 45
                      strength:
                        type: string
                        example: medium
                      feedback:
                        type: array
                        example:
                          - 'Add special characters'
                          - 'Use more unique characters'
                        items:
                          type: string
        423:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration temporarily blocked. Please try again later.'
                  time_remaining_minutes: 15
                properties:
                  message:
                    type: string
                    example: 'Registration temporarily blocked. Please try again later.'
                  time_remaining_minutes:
                    type: integer
                    example: 15
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "The user's full name."
                  example: 'John Doe'
                  nullable: false
                email:
                  type: string
                  description: "The user's email address. Must be unique."
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password. Must be at least 12 characters with uppercase, lowercase, numbers, and symbols."
                  example: MySecurePass123!
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Password confirmation. Must match the password field.'
                  example: MySecurePass123!
                  nullable: false
              required:
                - name
                - email
                - password
                - password_confirmation
      security: []
  /api/login:
    post:
      summary: 'User login'
      operationId: userLogin
      description: 'Authenticates a user and returns an access token. Implements account lockout protection and tracks failed attempts.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    token_type: Bearer
                    access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
                    expires_at: 1640995200
                    user:
                      id: 1
                      email: john@example.com
                      role: user
                  message: 'User logged in successfully.'
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      token_type:
                        type: string
                        example: Bearer
                      access_token:
                        type: string
                        example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
                      expires_at:
                        type: integer
                        example: 1640995200
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: user
                  message:
                    type: string
                    example: 'User logged in successfully.'
                  status:
                    type: integer
                    example: 200
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid credentials'
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials'
        423:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Account is temporarily locked due to multiple failed login attempts.'
                  locked_until: '2024-01-15T15:30:00.000000Z'
                  time_remaining_seconds: 1800
                  time_remaining_minutes: 30
                  lockout_count: 2
                properties:
                  message:
                    type: string
                    example: 'Account is temporarily locked due to multiple failed login attempts.'
                  locked_until:
                    type: string
                    example: '2024-01-15T15:30:00.000000Z'
                  time_remaining_seconds:
                    type: integer
                    example: 1800
                  time_remaining_minutes:
                    type: integer
                    example: 30
                  lockout_count:
                    type: integer
                    example: 2
        426:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Your password has expired and must be changed before logging in.'
                  password_expired: true
                  change_password_required: true
                properties:
                  message:
                    type: string
                    example: 'Your password has expired and must be changed before logging in.'
                  password_expired:
                    type: boolean
                    example: true
                  change_password_required:
                    type: boolean
                    example: true
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email address."
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: "The user's password."
                  example: MySecurePass123!
                  nullable: false
                remember:
                  type: boolean
                  description: 'optional Whether to remember the user for extended period.'
                  example: true
                  nullable: true
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'User logout'
      operationId: userLogout
      description: 'Logs out the authenticated user and revokes their access token.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'User logged out successfully'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'User logged out successfully'
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
  /api/change-password:
    post:
      summary: 'Change password'
      operationId: changePassword
      description: "Changes the authenticated user's password. Requires current password verification and validates new password strength."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    password_strength:
                      score: 85
                      strength: 'very strong'
                      feedback: []
                    security_score:
                      score: 95
                      level: excellent
                      issues: []
                  message: 'Password changed successfully'
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      password_strength:
                        type: object
                        properties:
                          score:
                            type: integer
                            example: 85
                          strength:
                            type: string
                            example: 'very strong'
                          feedback:
                            type: array
                            example: []
                      security_score:
                        type: object
                        properties:
                          score:
                            type: integer
                            example: 95
                          level:
                            type: string
                            example: excellent
                          issues:
                            type: array
                            example: []
                  message:
                    type: string
                    example: 'Password changed successfully'
                  status:
                    type: integer
                    example: 200
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Current password is incorrect'
                properties:
                  message:
                    type: string
                    example: 'Current password is incorrect'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'New password does not meet security requirements.'
                  errors:
                    - 'Password cannot be the same as your last 5 passwords.'
                  strength:
                    score: 45
                    strength: medium
                    feedback:
                      - 'Add special characters'
                properties:
                  message:
                    type: string
                    example: 'New password does not meet security requirements.'
                  errors:
                    type: array
                    example:
                      - 'Password cannot be the same as your last 5 passwords.'
                    items:
                      type: string
                  strength:
                    type: object
                    properties:
                      score:
                        type: integer
                        example: 45
                      strength:
                        type: string
                        example: medium
                      feedback:
                        type: array
                        example:
                          - 'Add special characters'
                        items:
                          type: string
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: "The user's current password."
                  example: MyOldPass123!
                  nullable: false
                new_password:
                  type: string
                  description: 'The new password. Must meet security requirements.'
                  example: MyNewSecurePass456!
                  nullable: false
                new_password_confirmation:
                  type: string
                  description: 'Confirmation of the new password.'
                  example: MyNewSecurePass456!
                  nullable: false
              required:
                - current_password
                - new_password
                - new_password_confirmation
  /api/security-info:
    get:
      summary: 'Get security information'
      operationId: getSecurityInformation
      description: 'Retrieves comprehensive security information for the authenticated user including account lock status, security score, and password expiry details.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    account_lock:
                      is_locked: false
                      failed_attempts: 0
                      max_attempts: 5
                      lockout_count: 0
                      locked_until: null
                      time_until_unlock: null
                      last_attempt_at: null
                      last_successful_login: '2024-01-15T10:30:00.000000Z'
                      should_reset: false
                    security_score:
                      score: 85
                      level: good
                      issues:
                        - 'Medium strength password'
                    password_expiry:
                      requires_change: false
                      days_until_expiry: 45
                      last_changed: '2024-01-01T12:00:00.000000Z'
                    login_history:
                      last_login: '2024-01-15T10:30:00.000000Z'
                      last_login_ip: 192.168.1.100
                  message: 'Security information retrieved'
                  status: 200
                properties:
                  data:
                    type: object
                    properties:
                      account_lock:
                        type: object
                        properties:
                          is_locked:
                            type: boolean
                            example: false
                          failed_attempts:
                            type: integer
                            example: 0
                          max_attempts:
                            type: integer
                            example: 5
                          lockout_count:
                            type: integer
                            example: 0
                          locked_until:
                            type: string
                            example: null
                          time_until_unlock:
                            type: string
                            example: null
                          last_attempt_at:
                            type: string
                            example: null
                          last_successful_login:
                            type: string
                            example: '2024-01-15T10:30:00.000000Z'
                          should_reset:
                            type: boolean
                            example: false
                      security_score:
                        type: object
                        properties:
                          score:
                            type: integer
                            example: 85
                          level:
                            type: string
                            example: good
                          issues:
                            type: array
                            example:
                              - 'Medium strength password'
                            items:
                              type: string
                      password_expiry:
                        type: object
                        properties:
                          requires_change:
                            type: boolean
                            example: false
                          days_until_expiry:
                            type: integer
                            example: 45
                          last_changed:
                            type: string
                            example: '2024-01-01T12:00:00.000000Z'
                      login_history:
                        type: object
                        properties:
                          last_login:
                            type: string
                            example: '2024-01-15T10:30:00.000000Z'
                          last_login_ip:
                            type: string
                            example: 192.168.1.100
                  message:
                    type: string
                    example: 'Security information retrieved'
                  status:
                    type: integer
                    example: 200
      tags:
        - Authentication
  /api/forgot-password:
    post:
      summary: 'Forgot password'
      operationId: forgotPassword
      description: "Sends a password reset link to the user's email address."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'We have emailed your password reset link!'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'We have emailed your password reset link!'
                  status:
                    type: integer
                    example: 200
        423:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password reset temporarily blocked. Please try again later.'
                properties:
                  message:
                    type: string
                    example: 'Password reset temporarily blocked. Please try again later.'
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "The user's email address."
                  example: john@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/reset-password:
    post:
      summary: 'Reset password'
      operationId: resetPassword
      description: "Resets the user's password using a valid reset token from the forgot password email."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data: []
                  message: 'Your password has been reset!'
                  status: 200
                properties:
                  data:
                    type: array
                    example: []
                  message:
                    type: string
                    example: 'Your password has been reset!'
                  status:
                    type: integer
                    example: 200
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'New password does not meet security requirements.'
                  errors:
                    - 'Password must contain at least 1 special character(s).'
                  strength:
                    score: 60
                    strength: strong
                    feedback:
                      - 'Add special characters'
                properties:
                  message:
                    type: string
                    example: 'New password does not meet security requirements.'
                  errors:
                    type: array
                    example:
                      - 'Password must contain at least 1 special character(s).'
                    items:
                      type: string
                  strength:
                    type: object
                    properties:
                      score:
                        type: integer
                        example: 60
                      strength:
                        type: string
                        example: strong
                      feedback:
                        type: array
                        example:
                          - 'Add special characters'
                        items:
                          type: string
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The password reset token from the email.'
                  example: abc123def456
                  nullable: false
                email:
                  type: string
                  description: "The user's email address."
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The new password. Must meet security requirements.'
                  example: MyNewSecurePass456!
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Confirmation of the new password.'
                  example: MyNewSecurePass456!
                  nullable: false
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  '/api/email/verify/{id}/{hash}':
    get:
      summary: "Verify a user's email address"
      operationId: verifyAUsersEmailAddress
      description: "This endpoint verifies a user's email address using a signed URL that is sent to their email\nafter registration. The verification link contains the user ID and a hash for security.\nOnce verified, the user's email_verified_at timestamp is set and they can access protected features."
      parameters:
        -
          in: query
          name: expires
          description: 'The expiration timestamp for the verification link. Automatically included.'
          example: 1640995200
          required: true
          schema:
            type: integer
            description: 'The expiration timestamp for the verification link. Automatically included.'
            example: 1640995200
            nullable: false
        -
          in: query
          name: signature
          description: 'The signature that validates the signed URL. Automatically included.'
          example: xyz789abc123def456
          required: true
          schema:
            type: string
            description: 'The signature that validates the signed URL. Automatically included.'
            example: xyz789abc123def456
            nullable: false
      responses:
        302:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Email verified successfully'
                    type: object
                    example:
                      description: 'User is redirected to the frontend email verification success page'
                      headers:
                        Location: 'https://yourfrontend.com/email-verified'
                    properties:
                      description:
                        type: string
                        example: 'User is redirected to the frontend email verification success page'
                      headers:
                        type: object
                        properties:
                          Location:
                            type: string
                            example: 'https://yourfrontend.com/email-verified'
                  -
                    description: 'Email already verified'
                    type: object
                    example:
                      description: 'User is redirected to the frontend (email was already verified previously)'
                      headers:
                        Location: 'https://yourfrontend.com/email-verified'
                    properties:
                      description:
                        type: string
                        example: 'User is redirected to the frontend (email was already verified previously)'
                      headers:
                        type: object
                        properties:
                          Location:
                            type: string
                            example: 'https://yourfrontend.com/email-verified'
        401:
          description: 'Invalid or expired verification link'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid/Expired url provided.'
                  status: 401
                properties:
                  message:
                    type: string
                    example: 'Invalid/Expired url provided.'
                  status:
                    type: integer
                    example: 401
        403:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Signature verification failed'
                    type: object
                    example:
                      message: 'Invalid/Expired url provided.'
                      status: 401
                    properties:
                      message:
                        type: string
                        example: 'Invalid/Expired url provided.'
                      status:
                        type: integer
                        example: 401
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Invalid signature.'
                      exception: Illuminate\Routing\Exceptions\InvalidSignatureException
                      file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Middleware/ValidateSignature.php
                      line: 73
                      trace:
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Routing\Middleware\ValidateSignature
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/app/Http/Middleware/V1/SecurityMonitoring.php
                          line: 27
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: App\Http\Middleware\V1\SecurityMonitoring
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/app/Http/Middleware/V1/SecurityLogger.php
                          line: 23
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: App\Http\Middleware\V1\SecurityLogger
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/app/Http/Middleware/V1/SecurityHeaders.php
                          line: 12
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: App\Http\Middleware\V1\SecurityHeaders
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php
                          line: 51
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Routing\Middleware\SubstituteBindings
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 127
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                          line: 807
                          function: then
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                          line: 786
                          function: runRouteWithinStack
                          class: Illuminate\Routing\Router
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                          line: 750
                          function: runRoute
                          class: Illuminate\Routing\Router
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                          line: 739
                          function: dispatchToRoute
                          class: Illuminate\Routing\Router
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
                          line: 201
                          function: dispatch
                          class: Illuminate\Routing\Router
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 170
                          function: 'Illuminate\Foundation\Http\{closure}'
                          class: Illuminate\Foundation\Http\Kernel
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php
                          line: 21
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php
                          line: 31
                          function: handle
                          class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php
                          line: 21
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php
                          line: 51
                          function: handle
                          class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Foundation\Http\Middleware\TrimStrings
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Http/Middleware/ValidatePostSize.php
                          line: 27
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Http\Middleware\ValidatePostSize
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php
                          line: 110
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php
                          line: 62
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Http\Middleware\HandleCors
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php
                          line: 58
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Http\Middleware\TrustProxies
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/InvokeDeferredCallbacks.php
                          line: 22
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 209
                          function: handle
                          class: Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                          line: 127
                          function: 'Illuminate\Pipeline\{closure}'
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
                          line: 176
                          function: then
                          class: Illuminate\Pipeline\Pipeline
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
                          line: 145
                          function: sendRequestThroughRouter
                          class: Illuminate\Foundation\Http\Kernel
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                          line: 310
                          function: handle
                          class: Illuminate\Foundation\Http\Kernel
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                          line: 298
                          function: callLaravelOrLumenRoute
                          class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                          line: 91
                          function: makeApiCall
                          class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                          line: 44
                          function: makeResponseCall
                          class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                          line: 35
                          function: makeResponseCallIfConditionsPass
                          class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Extractor.php
                          line: 237
                          function: __invoke
                          class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Extractor.php
                          line: 163
                          function: iterateThroughStrategies
                          class: Knuckles\Scribe\Extracting\Extractor
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Extractor.php
                          line: 95
                          function: fetchResponses
                          class: Knuckles\Scribe\Extracting\Extractor
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/GroupedEndpoints/GroupedEndpointsFromApp.php
                          line: 125
                          function: processRoute
                          class: Knuckles\Scribe\Extracting\Extractor
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/GroupedEndpoints/GroupedEndpointsFromApp.php
                          line: 72
                          function: extractEndpointsInfoFromLaravelApp
                          class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/GroupedEndpoints/GroupedEndpointsFromApp.php
                          line: 50
                          function: extractEndpointsInfoAndWriteToDisk
                          class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php
                          line: 53
                          function: get
                          class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php
                          line: 36
                          function: handle
                          class: Knuckles\Scribe\Commands\GenerateDocumentation
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/Util.php
                          line: 43
                          function: 'Illuminate\Container\{closure}'
                          class: Illuminate\Container\BoundMethod
                          type: '::'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php
                          line: 95
                          function: unwrapIfClosure
                          class: Illuminate\Container\Util
                          type: '::'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php
                          line: 35
                          function: callBoundMethod
                          class: Illuminate\Container\BoundMethod
                          type: '::'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/Container.php
                          line: 694
                          function: call
                          class: Illuminate\Container\BoundMethod
                          type: '::'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Console/Command.php
                          line: 213
                          function: call
                          class: Illuminate\Container\Container
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/symfony/console/Command/Command.php
                          line: 279
                          function: execute
                          class: Illuminate\Console\Command
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Console/Command.php
                          line: 182
                          function: run
                          class: Symfony\Component\Console\Command\Command
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/symfony/console/Application.php
                          line: 1094
                          function: run
                          class: Illuminate\Console\Command
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/symfony/console/Application.php
                          line: 342
                          function: doRunCommand
                          class: Symfony\Component\Console\Application
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/symfony/console/Application.php
                          line: 193
                          function: doRun
                          class: Symfony\Component\Console\Application
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php
                          line: 198
                          function: run
                          class: Symfony\Component\Console\Application
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Application.php
                          line: 1208
                          function: handle
                          class: Illuminate\Foundation\Console\Kernel
                          type: '->'
                        -
                          file: /var/www/ecommerce_api/api/artisan
                          line: 13
                          function: handleCommand
                          class: Illuminate\Foundation\Application
                          type: '->'
                    properties:
                      message:
                        type: string
                        example: 'Invalid signature.'
                      exception:
                        type: string
                        example: Illuminate\Routing\Exceptions\InvalidSignatureException
                      file:
                        type: string
                        example: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Middleware/ValidateSignature.php
                      line:
                        type: integer
                        example: 73
                      trace:
                        type: array
                        example:
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Routing\Middleware\ValidateSignature
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/app/Http/Middleware/V1/SecurityMonitoring.php
                            line: 27
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: App\Http\Middleware\V1\SecurityMonitoring
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/app/Http/Middleware/V1/SecurityLogger.php
                            line: 23
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: App\Http\Middleware\V1\SecurityLogger
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/app/Http/Middleware/V1/SecurityHeaders.php
                            line: 12
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: App\Http\Middleware\V1\SecurityHeaders
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Middleware/SubstituteBindings.php
                            line: 51
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Routing\Middleware\SubstituteBindings
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 127
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                            line: 807
                            function: then
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                            line: 786
                            function: runRouteWithinStack
                            class: Illuminate\Routing\Router
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                            line: 750
                            function: runRoute
                            class: Illuminate\Routing\Router
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Routing/Router.php
                            line: 739
                            function: dispatchToRoute
                            class: Illuminate\Routing\Router
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
                            line: 201
                            function: dispatch
                            class: Illuminate\Routing\Router
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 170
                            function: 'Illuminate\Foundation\Http\{closure}'
                            class: Illuminate\Foundation\Http\Kernel
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php
                            line: 21
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/ConvertEmptyStringsToNull.php
                            line: 31
                            function: handle
                            class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TransformsRequest.php
                            line: 21
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/TrimStrings.php
                            line: 51
                            function: handle
                            class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Foundation\Http\Middleware\TrimStrings
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Http/Middleware/ValidatePostSize.php
                            line: 27
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Http\Middleware\ValidatePostSize
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php
                            line: 110
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Http/Middleware/HandleCors.php
                            line: 62
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Http\Middleware\HandleCors
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Http/Middleware/TrustProxies.php
                            line: 58
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Http\Middleware\TrustProxies
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/InvokeDeferredCallbacks.php
                            line: 22
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 209
                            function: handle
                            class: Illuminate\Foundation\Http\Middleware\InvokeDeferredCallbacks
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line: 127
                            function: 'Illuminate\Pipeline\{closure}'
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
                            line: 176
                            function: then
                            class: Illuminate\Pipeline\Pipeline
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
                            line: 145
                            function: sendRequestThroughRouter
                            class: Illuminate\Foundation\Http\Kernel
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                            line: 310
                            function: handle
                            class: Illuminate\Foundation\Http\Kernel
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                            line: 298
                            function: callLaravelOrLumenRoute
                            class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                            line: 91
                            function: makeApiCall
                            class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                            line: 44
                            function: makeResponseCall
                            class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Strategies/Responses/ResponseCalls.php
                            line: 35
                            function: makeResponseCallIfConditionsPass
                            class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Extractor.php
                            line: 237
                            function: __invoke
                            class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Extractor.php
                            line: 163
                            function: iterateThroughStrategies
                            class: Knuckles\Scribe\Extracting\Extractor
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Extracting/Extractor.php
                            line: 95
                            function: fetchResponses
                            class: Knuckles\Scribe\Extracting\Extractor
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/GroupedEndpoints/GroupedEndpointsFromApp.php
                            line: 125
                            function: processRoute
                            class: Knuckles\Scribe\Extracting\Extractor
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/GroupedEndpoints/GroupedEndpointsFromApp.php
                            line: 72
                            function: extractEndpointsInfoFromLaravelApp
                            class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/GroupedEndpoints/GroupedEndpointsFromApp.php
                            line: 50
                            function: extractEndpointsInfoAndWriteToDisk
                            class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/knuckleswtf/scribe/src/Commands/GenerateDocumentation.php
                            line: 53
                            function: get
                            class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php
                            line: 36
                            function: handle
                            class: Knuckles\Scribe\Commands\GenerateDocumentation
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/Util.php
                            line: 43
                            function: 'Illuminate\Container\{closure}'
                            class: Illuminate\Container\BoundMethod
                            type: '::'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php
                            line: 95
                            function: unwrapIfClosure
                            class: Illuminate\Container\Util
                            type: '::'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/BoundMethod.php
                            line: 35
                            function: callBoundMethod
                            class: Illuminate\Container\BoundMethod
                            type: '::'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Container/Container.php
                            line: 694
                            function: call
                            class: Illuminate\Container\BoundMethod
                            type: '::'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Console/Command.php
                            line: 213
                            function: call
                            class: Illuminate\Container\Container
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/symfony/console/Command/Command.php
                            line: 279
                            function: execute
                            class: Illuminate\Console\Command
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Console/Command.php
                            line: 182
                            function: run
                            class: Symfony\Component\Console\Command\Command
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/symfony/console/Application.php
                            line: 1094
                            function: run
                            class: Illuminate\Console\Command
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/symfony/console/Application.php
                            line: 342
                            function: doRunCommand
                            class: Symfony\Component\Console\Application
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/symfony/console/Application.php
                            line: 193
                            function: doRun
                            class: Symfony\Component\Console\Application
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php
                            line: 198
                            function: run
                            class: Symfony\Component\Console\Application
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Foundation/Application.php
                            line: 1208
                            function: handle
                            class: Illuminate\Foundation\Console\Kernel
                            type: '->'
                          -
                            file: /var/www/ecommerce_api/api/artisan
                            line: 13
                            function: handleCommand
                            class: Illuminate\Foundation\Application
                            type: '->'
                        items:
                          type: object
                          properties:
                            file:
                              type: string
                              example: /var/www/ecommerce_api/api/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
                            line:
                              type: integer
                              example: 209
                            function:
                              type: string
                              example: handle
                            class:
                              type: string
                              example: Illuminate\Routing\Middleware\ValidateSignature
                            type:
                              type: string
                              example: '->'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\User] 123'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\User] 123'
      tags:
        - 'Email Verification'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the verify.'
        example: architecto
        required: true
        schema:
          type: string
      -
        in: path
        name: hash
        description: "The verification hash that ensures the link is valid and hasn't been tampered with. This is automatically included in the verification link."
        example: abc123def456ghi789
        required: true
        schema:
          type: string
      -
        in: path
        name: user_id
        description: 'The ID of the user whose email is being verified. This is automatically included in the verification link.'
        example: 123
        required: true
        schema:
          type: integer
  /api/email/resend:
    get:
      summary: 'Resend email verification notification'
      operationId: resendEmailVerificationNotification
      description: "Sends a new email verification link to the authenticated user's email address.\nThis is useful when users don't receive the initial verification email or when\nthe verification link has expired. The user must be authenticated to request a resend."
      parameters: []
      responses:
        200:
          description: 'Verification email sent successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email verification link sent on your email id.'
                  status: 200
                properties:
                  message:
                    type: string
                    example: 'Email verification link sent on your email id.'
                  status:
                    type: integer
                    example: 200
        400:
          description: 'Email already verified'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email already verified.'
                  status: 400
                properties:
                  message:
                    type: string
                    example: 'Email already verified.'
                  status:
                    type: integer
                    example: 400
        401:
          description: 'User not authenticated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                  status: 401
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
                  status:
                    type: integer
                    example: 401
        429:
          description: 'Too many requests'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many verification emails sent. Please wait before requesting another.'
                  status: 429
                properties:
                  message:
                    type: string
                    example: 'Too many verification emails sent. Please wait before requesting another.'
                  status:
                    type: integer
                    example: 429
        500:
          description: 'Email sending failed'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Failed to send verification email. Please try again later.'
                  status: 500
                properties:
                  message:
                    type: string
                    example: 'Failed to send verification email. Please try again later.'
                  status:
                    type: integer
                    example: 500
      tags:
        - 'Email Verification'
  /api/admin/product-attributes:
    get:
      summary: 'Retrieve all product attributes.'
      operationId: retrieveAllProductAttributes
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Attributes retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Attributes retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Attributes'
    post:
      summary: 'Create a new product attribute.'
      operationId: createANewProductAttribute
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product attribute created successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Product attribute created successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Attributes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product attribute.'
                  example: '"Color"'
                  nullable: false
              required:
                - name
  '/api/admin/product-attributes/{productAttribute_id}':
    get:
      summary: 'Retrieve a specific product attribute.'
      operationId: retrieveASpecificProductAttribute
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Attribute retrieved successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Attribute retrieved successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Attributes'
    post:
      summary: 'Update a product attribute.'
      operationId: updateAProductAttribute
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product attribute updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Product attribute updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Attributes'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The updated name of the product attribute.'
                  example: '"Size"'
                  nullable: false
              required:
                - name
    delete:
      summary: 'Delete a product attribute.'
      operationId: deleteAProductAttribute
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product attribute deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Product attribute deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Attributes'
    parameters:
      -
        in: path
        name: productAttribute_id
        description: 'The ID of the productAttribute.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/product-tags:
    get:
      summary: 'Retrieve all product tags.'
      operationId: retrieveAllProductTags
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tags retrieved successfully.'
                  data:
                    -
                      id: 1
                      name: Electronics
                    -
                      id: 2
                      name: Fashion
                properties:
                  message:
                    type: string
                    example: 'Tags retrieved successfully.'
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: Electronics
                      -
                        id: 2
                        name: Fashion
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Electronics
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Tags'
    post:
      summary: 'Create a new product tag.'
      operationId: createANewProductTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag created successfully.'
                  data:
                    id: 3
                    name: 'Home Appliances'
                properties:
                  message:
                    type: string
                    example: 'Tag created successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 3
                      name:
                        type: string
                        example: 'Home Appliances'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Tags'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product tag.'
                  example: architecto
                  nullable: false
              required:
                - name
  '/api/admin/product-tags/{productTag_id}':
    get:
      summary: 'Retrieve a specific product tag.'
      operationId: retrieveASpecificProductTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag retrieved successfully.'
                  data:
                    id: 1
                    name: Electronics
                properties:
                  message:
                    type: string
                    example: 'Tag retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Electronics
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Tags'
    post:
      summary: 'Update an existing product tag.'
      operationId: updateAnExistingProductTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag updated successfully.'
                  data:
                    id: 1
                    name: Gadgets
                properties:
                  message:
                    type: string
                    example: 'Tag updated successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Gadgets
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Tags'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The updated name of the product tag.'
                  example: architecto
                  nullable: false
              required:
                - name
    delete:
      summary: 'Delete a product tag.'
      operationId: deleteAProductTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Tag deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Tag deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Tags'
    parameters:
      -
        in: path
        name: productTag_id
        description: 'The ID of the productTag.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/orders:
    get:
      summary: 'Retrieve paginated list of orders'
      operationId: retrievePaginatedListOfOrders
      description: "Get a paginated list of all orders in the system. This endpoint supports filtering by user and status,\nand includes comprehensive order information including items, user details, and current status."
      parameters:
        -
          in: query
          name: user_id
          description: 'optional Filter orders by specific user ID.'
          example: 123
          required: false
          schema:
            type: integer
            description: 'optional Filter orders by specific user ID.'
            example: 123
            nullable: false
        -
          in: query
          name: status_id
          description: 'optional Filter orders by specific status ID.'
          example: 2
          required: false
          schema:
            type: integer
            description: 'optional Filter orders by specific status ID.'
            example: 2
            nullable: false
        -
          in: query
          name: page
          description: 'optional Page number for pagination. Default: 1.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'optional Page number for pagination. Default: 1.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'optional Number of orders per page (max 50). Default: 15.'
          example: 20
          required: false
          schema:
            type: integer
            description: 'optional Number of orders per page (max 50). Default: 15.'
            example: 20
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Success with orders'
                    type: object
                    example:
                      message: 'Orders retrieved successfully.'
                      data:
                        data:
                          -
                            id: 1
                            total_amount: 29.99
                            total_amount_formatted: £29.99
                            created_at: '2025-01-15T10:30:00.000000Z'
                            updated_at: '2025-01-15T10:35:00.000000Z'
                            deleted_at: null
                            user:
                              id: 5
                              name: 'John Smith'
                              email: john.smith@example.com
                              email_verified_at: '2025-01-10T08:00:00.000000Z'
                            status:
                              id: 2
                              name: Processing
                            order_items:
                              -
                                id: 1
                                quantity: 2
                                price: 1499
                                price_formatted: £14.99
                                line_total: 2998
                                line_total_formatted: £29.98
                                product:
                                  id: 10
                                  name: 'Wireless Headphones'
                                  description: 'High-quality wireless headphones with noise cancellation'
                                product_variant:
                                  id: 3
                                  value: Black
                                  additional_price: 0
                                  product_attribute:
                                    id: 1
                                    name: Color
                                order_return: null
                            payments:
                              -
                                id: 1
                                amount: 2999
                                amount_formatted: £29.99
                                status: Paid
                                method: stripe
                                transaction_reference: pi_1234567890abcdef
                                processed_at: '2025-01-15T10:32:00.000000Z'
                        current_page: 1
                        per_page: 15
                        total: 42
                        last_page: 3
                        from: 1
                        to: 15
                    properties:
                      message:
                        type: string
                        example: 'Orders retrieved successfully.'
                      data:
                        type: object
                        properties:
                          data:
                            type: array
                            example:
                              -
                                id: 1
                                total_amount: 29.99
                                total_amount_formatted: £29.99
                                created_at: '2025-01-15T10:30:00.000000Z'
                                updated_at: '2025-01-15T10:35:00.000000Z'
                                deleted_at: null
                                user:
                                  id: 5
                                  name: 'John Smith'
                                  email: john.smith@example.com
                                  email_verified_at: '2025-01-10T08:00:00.000000Z'
                                status:
                                  id: 2
                                  name: Processing
                                order_items:
                                  -
                                    id: 1
                                    quantity: 2
                                    price: 1499
                                    price_formatted: £14.99
                                    line_total: 2998
                                    line_total_formatted: £29.98
                                    product:
                                      id: 10
                                      name: 'Wireless Headphones'
                                      description: 'High-quality wireless headphones with noise cancellation'
                                    product_variant:
                                      id: 3
                                      value: Black
                                      additional_price: 0
                                      product_attribute: { id: 1, name: Color }
                                    order_return: null
                                payments:
                                  -
                                    id: 1
                                    amount: 2999
                                    amount_formatted: £29.99
                                    status: Paid
                                    method: stripe
                                    transaction_reference: pi_1234567890abcdef
                                    processed_at: '2025-01-15T10:32:00.000000Z'
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                total_amount:
                                  type: number
                                  example: 29.99
                                total_amount_formatted:
                                  type: string
                                  example: £29.99
                                created_at:
                                  type: string
                                  example: '2025-01-15T10:30:00.000000Z'
                                updated_at:
                                  type: string
                                  example: '2025-01-15T10:35:00.000000Z'
                                deleted_at:
                                  type: string
                                  example: null
                                user:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 5
                                    name:
                                      type: string
                                      example: 'John Smith'
                                    email:
                                      type: string
                                      example: john.smith@example.com
                                    email_verified_at:
                                      type: string
                                      example: '2025-01-10T08:00:00.000000Z'
                                status:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 2
                                    name:
                                      type: string
                                      example: Processing
                                order_items:
                                  type: array
                                  example:
                                    -
                                      id: 1
                                      quantity: 2
                                      price: 1499
                                      price_formatted: £14.99
                                      line_total: 2998
                                      line_total_formatted: £29.98
                                      product: { id: 10, name: 'Wireless Headphones', description: 'High-quality wireless headphones with noise cancellation' }
                                      product_variant: { id: 3, value: Black, additional_price: 0, product_attribute: { id: 1, name: Color } }
                                      order_return: null
                                  items:
                                    type: object
                                    properties:
                                      id: { type: integer, example: 1 }
                                      quantity: { type: integer, example: 2 }
                                      price: { type: integer, example: 1499 }
                                      price_formatted: { type: string, example: £14.99 }
                                      line_total: { type: integer, example: 2998 }
                                      line_total_formatted: { type: string, example: £29.98 }
                                      product: { type: object, properties: { id: { type: integer, example: 10 }, name: { type: string, example: 'Wireless Headphones' }, description: { type: string, example: 'High-quality wireless headphones with noise cancellation' } } }
                                      product_variant: { type: object, properties: { id: { type: integer, example: 3 }, value: { type: string, example: Black }, additional_price: { type: integer, example: 0 }, product_attribute: { type: object, properties: { id: { type: integer, example: 1 }, name: { type: string, example: Color } } } } }
                                      order_return: { type: string, example: null }
                                payments:
                                  type: array
                                  example:
                                    -
                                      id: 1
                                      amount: 2999
                                      amount_formatted: £29.99
                                      status: Paid
                                      method: stripe
                                      transaction_reference: pi_1234567890abcdef
                                      processed_at: '2025-01-15T10:32:00.000000Z'
                                  items:
                                    type: object
                                    properties:
                                      id: { type: integer, example: 1 }
                                      amount: { type: integer, example: 2999 }
                                      amount_formatted: { type: string, example: £29.99 }
                                      status: { type: string, example: Paid }
                                      method: { type: string, example: stripe }
                                      transaction_reference: { type: string, example: pi_1234567890abcdef }
                                      processed_at: { type: string, example: '2025-01-15T10:32:00.000000Z' }
                          current_page:
                            type: integer
                            example: 1
                          per_page:
                            type: integer
                            example: 15
                          total:
                            type: integer
                            example: 42
                          last_page:
                            type: integer
                            example: 3
                          from:
                            type: integer
                            example: 1
                          to:
                            type: integer
                            example: 15
                  -
                    description: 'No orders found'
                    type: object
                    example:
                      message: 'Orders retrieved successfully.'
                      data:
                        data: []
                        current_page: 1
                        per_page: 15
                        total: 0
                        last_page: 1
                        from: null
                        to: null
                    properties:
                      message:
                        type: string
                        example: 'Orders retrieved successfully.'
                      data:
                        type: object
                        properties:
                          data:
                            type: array
                            example: []
                          current_page:
                            type: integer
                            example: 1
                          per_page:
                            type: integer
                            example: 15
                          total:
                            type: integer
                            example: 0
                          last_page:
                            type: integer
                            example: 1
                          from:
                            type: string
                            example: null
                          to:
                            type: string
                            example: null
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        422:
          description: 'Invalid filter parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    - 'The user id field must be an integer.'
                    - 'The status id field must exist in order_statuses table.'
                properties:
                  errors:
                    type: array
                    example:
                      - 'The user id field must be an integer.'
                      - 'The status id field must exist in order_statuses table.'
                    items:
                      type: string
      tags:
        - 'Order Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
                status_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the order_statuses table.'
                  example: null
                  nullable: true
    post:
      summary: 'Create a new order'
      operationId: createANewOrder
      description: "Create a new order with multiple order items. The system will automatically calculate the total amount\nbased on the items and their quantities. All monetary values should be provided in pennies."
      parameters: []
      responses:
        200:
          description: 'Order created successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order created successfully.'
                  data:
                    id: 43
                    total_amount: 2999
                    total_amount_formatted: £29.99
                    created_at: '2025-01-15T14:20:00.000000Z'
                    updated_at: '2025-01-15T14:20:00.000000Z'
                    deleted_at: null
                    user:
                      id: 5
                      name: 'John Smith'
                      email: john.smith@example.com
                    status:
                      id: 1
                      name: 'Pending Payment'
                    order_items:
                      -
                        id: 85
                        quantity: 2
                        price: 1499
                        price_formatted: £14.99
                        line_total: 2998
                        line_total_formatted: £29.98
                        product:
                          id: 10
                          name: 'Wireless Headphones'
                          price: 1499
                          price_formatted: £14.99
                        product_variant:
                          id: 3
                          value: Black
                          additional_price: 0
                    payments: []
                properties:
                  message:
                    type: string
                    example: 'Order created successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 43
                      total_amount:
                        type: integer
                        example: 2999
                      total_amount_formatted:
                        type: string
                        example: £29.99
                      created_at:
                        type: string
                        example: '2025-01-15T14:20:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T14:20:00.000000Z'
                      deleted_at:
                        type: string
                        example: null
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 5
                          name:
                            type: string
                            example: 'John Smith'
                          email:
                            type: string
                            example: john.smith@example.com
                      status:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'Pending Payment'
                      order_items:
                        type: array
                        example:
                          -
                            id: 85
                            quantity: 2
                            price: 1499
                            price_formatted: £14.99
                            line_total: 2998
                            line_total_formatted: £29.98
                            product:
                              id: 10
                              name: 'Wireless Headphones'
                              price: 1499
                              price_formatted: £14.99
                            product_variant:
                              id: 3
                              value: Black
                              additional_price: 0
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 85
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: integer
                              example: 1499
                            price_formatted:
                              type: string
                              example: £14.99
                            line_total:
                              type: integer
                              example: 2998
                            line_total_formatted:
                              type: string
                              example: £29.98
                            product:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 10
                                name:
                                  type: string
                                  example: 'Wireless Headphones'
                                price:
                                  type: integer
                                  example: 1499
                                price_formatted:
                                  type: string
                                  example: £14.99
                            product_variant:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 3
                                value:
                                  type: string
                                  example: Black
                                additional_price:
                                  type: integer
                                  example: 0
                      payments:
                        type: array
                        example: []
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'User not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The selected user id is invalid.'
                properties:
                  message:
                    type: string
                    example: 'The selected user id is invalid.'
        422:
          description: 'Validation errors'
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    - 'The user id field is required.'
                    - 'The order items field is required.'
                    - 'The order items.0.product id field is required.'
                    - 'The order items.0.quantity must be at least 1.'
                    - 'The order items.0.price must be greater than 0.'
                properties:
                  errors:
                    type: array
                    example:
                      - 'The user id field is required.'
                      - 'The order items field is required.'
                      - 'The order items.0.product id field is required.'
                      - 'The order items.0.quantity must be at least 1.'
                      - 'The order items.0.price must be greater than 0.'
                    items:
                      type: string
        500:
          description: 'Server error'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'An error occurred while creating the order.'
                properties:
                  message:
                    type: string
                    example: 'An error occurred while creating the order.'
      tags:
        - 'Order Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'The ID of the user placing the order.'
                  example: 5
                  nullable: false
                status_id:
                  type: integer
                  description: 'optional The initial status ID for the order. If not provided, defaults to "Pending Payment".'
                  example: 1
                  nullable: true
                order_items:
                  type: array
                  description: 'Array of order items. Must contain at least one item.'
                  example:
                    - architecto
                  items:
                    type: string
              required:
                - user_id
                - order_items
  '/api/admin/orders/{id}':
    get:
      summary: 'Retrieve a specific order'
      operationId: retrieveASpecificOrder
      description: "Get detailed information about a specific order including all order items, user details,\npayment information, and any associated returns or refunds."
      parameters: []
      responses:
        200:
          description: 'Order found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order retrieved successfully.'
                  data:
                    id: 43
                    total_amount: 5998
                    total_amount_formatted: £59.98
                    created_at: '2025-01-15T14:20:00.000000Z'
                    updated_at: '2025-01-15T14:25:00.000000Z'
                    deleted_at: null
                    user:
                      id: 5
                      name: 'John Smith'
                      email: john.smith@example.com
                      email_verified_at: '2025-01-10T08:00:00.000000Z'
                    status:
                      id: 3
                      name: Confirmed
                    order_items:
                      -
                        id: 85
                        quantity: 2
                        price: 1499
                        price_formatted: £14.99
                        line_total: 2998
                        line_total_formatted: £29.98
                        created_at: '2025-01-15T14:20:00.000000Z'
                        product:
                          id: 10
                          name: 'Wireless Headphones'
                          description: 'High-quality wireless headphones with noise cancellation'
                          price: 1499
                          price_formatted: £14.99
                        product_variant:
                          id: 3
                          value: Black
                          additional_price: 0
                          product_attribute:
                            id: 1
                            name: Color
                        order_return:
                          id: 12
                          reason: 'Product arrived damaged'
                          status:
                            id: 1
                            name: Requested
                          created_at: '2025-01-16T09:15:00.000000Z'
                      -
                        id: 86
                        quantity: 1
                        price: 2999
                        price_formatted: £29.99
                        line_total: 2999
                        line_total_formatted: £29.99
                        created_at: '2025-01-15T14:20:00.000000Z'
                        product:
                          id: 15
                          name: 'Bluetooth Speaker'
                          description: 'Portable waterproof Bluetooth speaker'
                          price: 2999
                          price_formatted: £29.99
                        product_variant: null
                        order_return: null
                    payments:
                      -
                        id: 25
                        amount: 5998
                        amount_formatted: £59.98
                        status: Paid
                        method: stripe
                        transaction_reference: pi_1234567890abcdef
                        processed_at: '2025-01-15T14:22:00.000000Z'
                        created_at: '2025-01-15T14:21:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Order retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 43
                      total_amount:
                        type: integer
                        example: 5998
                      total_amount_formatted:
                        type: string
                        example: £59.98
                      created_at:
                        type: string
                        example: '2025-01-15T14:20:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T14:25:00.000000Z'
                      deleted_at:
                        type: string
                        example: null
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 5
                          name:
                            type: string
                            example: 'John Smith'
                          email:
                            type: string
                            example: john.smith@example.com
                          email_verified_at:
                            type: string
                            example: '2025-01-10T08:00:00.000000Z'
                      status:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 3
                          name:
                            type: string
                            example: Confirmed
                      order_items:
                        type: array
                        example:
                          -
                            id: 85
                            quantity: 2
                            price: 1499
                            price_formatted: £14.99
                            line_total: 2998
                            line_total_formatted: £29.98
                            created_at: '2025-01-15T14:20:00.000000Z'
                            product:
                              id: 10
                              name: 'Wireless Headphones'
                              description: 'High-quality wireless headphones with noise cancellation'
                              price: 1499
                              price_formatted: £14.99
                            product_variant:
                              id: 3
                              value: Black
                              additional_price: 0
                              product_attribute:
                                id: 1
                                name: Color
                            order_return:
                              id: 12
                              reason: 'Product arrived damaged'
                              status:
                                id: 1
                                name: Requested
                              created_at: '2025-01-16T09:15:00.000000Z'
                          -
                            id: 86
                            quantity: 1
                            price: 2999
                            price_formatted: £29.99
                            line_total: 2999
                            line_total_formatted: £29.99
                            created_at: '2025-01-15T14:20:00.000000Z'
                            product:
                              id: 15
                              name: 'Bluetooth Speaker'
                              description: 'Portable waterproof Bluetooth speaker'
                              price: 2999
                              price_formatted: £29.99
                            product_variant: null
                            order_return: null
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 85
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: integer
                              example: 1499
                            price_formatted:
                              type: string
                              example: £14.99
                            line_total:
                              type: integer
                              example: 2998
                            line_total_formatted:
                              type: string
                              example: £29.98
                            created_at:
                              type: string
                              example: '2025-01-15T14:20:00.000000Z'
                            product:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 10
                                name:
                                  type: string
                                  example: 'Wireless Headphones'
                                description:
                                  type: string
                                  example: 'High-quality wireless headphones with noise cancellation'
                                price:
                                  type: integer
                                  example: 1499
                                price_formatted:
                                  type: string
                                  example: £14.99
                            product_variant:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 3
                                value:
                                  type: string
                                  example: Black
                                additional_price:
                                  type: integer
                                  example: 0
                                product_attribute:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: Color
                            order_return:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 12
                                reason:
                                  type: string
                                  example: 'Product arrived damaged'
                                status:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: Requested
                                created_at:
                                  type: string
                                  example: '2025-01-16T09:15:00.000000Z'
                      payments:
                        type: array
                        example:
                          -
                            id: 25
                            amount: 5998
                            amount_formatted: £59.98
                            status: Paid
                            method: stripe
                            transaction_reference: pi_1234567890abcdef
                            processed_at: '2025-01-15T14:22:00.000000Z'
                            created_at: '2025-01-15T14:21:00.000000Z'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 25
                            amount:
                              type: integer
                              example: 5998
                            amount_formatted:
                              type: string
                              example: £59.98
                            status:
                              type: string
                              example: Paid
                            method:
                              type: string
                              example: stripe
                            transaction_reference:
                              type: string
                              example: pi_1234567890abcdef
                            processed_at:
                              type: string
                              example: '2025-01-15T14:22:00.000000Z'
                            created_at:
                              type: string
                              example: '2025-01-15T14:21:00.000000Z'
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Order] 999'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 999'
      tags:
        - 'Order Management'
    post:
      summary: 'Update an existing order'
      operationId: updateAnExistingOrder
      description: "Update an existing order including its items. This will replace all existing order items with the new ones\nand recalculate the total amount. Use with caution as this will affect order history."
      parameters: []
      responses:
        200:
          description: 'Order updated successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order updated successfully.'
                  data:
                    id: 43
                    total_amount: 4497
                    total_amount_formatted: £44.97
                    created_at: '2025-01-15T14:20:00.000000Z'
                    updated_at: '2025-01-15T15:30:00.000000Z'
                    deleted_at: null
                    user:
                      id: 5
                      name: 'John Smith'
                      email: john.smith@example.com
                    status:
                      id: 2
                      name: Processing
                    order_items:
                      -
                        id: 87
                        quantity: 3
                        price: 1499
                        price_formatted: £14.99
                        line_total: 4497
                        line_total_formatted: £44.97
                        product:
                          id: 10
                          name: 'Wireless Headphones'
                    payments: []
                properties:
                  message:
                    type: string
                    example: 'Order updated successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 43
                      total_amount:
                        type: integer
                        example: 4497
                      total_amount_formatted:
                        type: string
                        example: £44.97
                      created_at:
                        type: string
                        example: '2025-01-15T14:20:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T15:30:00.000000Z'
                      deleted_at:
                        type: string
                        example: null
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 5
                          name:
                            type: string
                            example: 'John Smith'
                          email:
                            type: string
                            example: john.smith@example.com
                      status:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          name:
                            type: string
                            example: Processing
                      order_items:
                        type: array
                        example:
                          -
                            id: 87
                            quantity: 3
                            price: 1499
                            price_formatted: £14.99
                            line_total: 4497
                            line_total_formatted: £44.97
                            product:
                              id: 10
                              name: 'Wireless Headphones'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 87
                            quantity:
                              type: integer
                              example: 3
                            price:
                              type: integer
                              example: 1499
                            price_formatted:
                              type: string
                              example: £14.99
                            line_total:
                              type: integer
                              example: 4497
                            line_total_formatted:
                              type: string
                              example: £44.97
                            product:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 10
                                name:
                                  type: string
                                  example: 'Wireless Headphones'
                      payments:
                        type: array
                        example: []
        400:
          description: 'Order cannot be updated'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Cannot update order that has been shipped or completed.'
                properties:
                  message:
                    type: string
                    example: 'Cannot update order that has been shipped or completed.'
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Order] 999'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 999'
        422:
          description: 'Validation errors'
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    - 'The order items field is required.'
                    - 'The order items.0.quantity must be at least 1.'
                properties:
                  errors:
                    type: array
                    example:
                      - 'The order items field is required.'
                      - 'The order items.0.quantity must be at least 1.'
                    items:
                      type: string
      tags:
        - 'Order Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'optional The ID of the user (can be changed if needed).'
                  example: 5
                  nullable: true
                status_id:
                  type: integer
                  description: 'optional The new status ID for the order.'
                  example: 2
                  nullable: true
                order_items:
                  type: array
                  description: 'Array of order items (replaces existing items).'
                  example:
                    - architecto
                  items:
                    type: string
              required:
                - order_items
    delete:
      summary: 'Soft delete an order'
      operationId: softDeleteAnOrder
      description: "Soft delete an order, making it inactive but preserving the data for audit purposes.\nThe order will be hidden from normal queries but can be restored if needed."
      parameters: []
      responses:
        200:
          description: 'Order soft deleted successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order deleted (soft).'
                properties:
                  message:
                    type: string
                    example: 'Order deleted (soft).'
        400:
          description: 'Order cannot be deleted'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Cannot delete order with active payments or shipments.'
                properties:
                  message:
                    type: string
                    example: 'Cannot delete order with active payments or shipments.'
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Order] 999'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 999'
      tags:
        - 'Order Management'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: order
        description: 'The ID of the order to retrieve.'
        example: 43
        required: true
        schema:
          type: integer
  '/api/admin/orders/{id}/force-delete':
    delete:
      summary: 'Permanently delete an order'
      operationId: permanentlyDeleteAnOrder
      description: "Permanently remove an order from the database. This action is irreversible and should be used\nwith extreme caution. The order must be soft deleted first before it can be permanently deleted."
      parameters: []
      responses:
        200:
          description: 'Order permanently deleted'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order permanently deleted.'
                properties:
                  message:
                    type: string
                    example: 'Order permanently deleted.'
        400:
          description: 'Order must be soft deleted first'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order must be soft deleted before force deleting.'
                properties:
                  message:
                    type: string
                    example: 'Order must be soft deleted before force deleting.'
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Order] 43'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 43'
        409:
          description: 'Order has dependencies'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Cannot permanently delete order with associated payments or returns.'
                properties:
                  message:
                    type: string
                    example: 'Cannot permanently delete order with associated payments or returns.'
      tags:
        - 'Order Management'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the soft deleted order to permanently delete.'
        example: 43
        required: true
        schema:
          type: integer
  '/api/admin/orders/{id}/restore':
    patch:
      summary: 'Restore a soft deleted order'
      operationId: restoreASoftDeletedOrder
      description: "Restore a previously soft deleted order, making it active again in the system.\nOnly orders that have been soft deleted can be restored."
      parameters: []
      responses:
        200:
          description: 'Order restored successfully'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order restored successfully.'
                  data:
                    id: 43
                    total_amount: 2999
                    total_amount_formatted: £29.99
                    created_at: '2025-01-15T14:20:00.000000Z'
                    updated_at: '2025-01-15T16:45:00.000000Z'
                    deleted_at: null
                    user:
                      id: 5
                      name: 'John Smith'
                      email: john.smith@example.com
                    status:
                      id: 1
                      name: 'Pending Payment'
                properties:
                  message:
                    type: string
                    example: 'Order restored successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 43
                      total_amount:
                        type: integer
                        example: 2999
                      total_amount_formatted:
                        type: string
                        example: £29.99
                      created_at:
                        type: string
                        example: '2025-01-15T14:20:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T16:45:00.000000Z'
                      deleted_at:
                        type: string
                        example: null
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 5
                          name:
                            type: string
                            example: 'John Smith'
                          email:
                            type: string
                            example: john.smith@example.com
                      status:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'Pending Payment'
        400:
          description: 'Order not deleted'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order is not deleted.'
                properties:
                  message:
                    type: string
                    example: 'Order is not deleted.'
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Order] 43'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 43'
      tags:
        - 'Order Management'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the soft deleted order to restore.'
        example: 43
        required: true
        schema:
          type: integer
  /api/orders:
    get:
      summary: 'Retrieve paginated list of orders'
      operationId: retrievePaginatedListOfOrders
      description: "Get a paginated list of all orders in the system. This endpoint supports filtering by user and status,\nand includes comprehensive order information including items, user details, and current status."
      parameters:
        -
          in: query
          name: user_id
          description: 'optional Filter orders by specific user ID.'
          example: 123
          required: false
          schema:
            type: integer
            description: 'optional Filter orders by specific user ID.'
            example: 123
            nullable: false
        -
          in: query
          name: status_id
          description: 'optional Filter orders by specific status ID.'
          example: 2
          required: false
          schema:
            type: integer
            description: 'optional Filter orders by specific status ID.'
            example: 2
            nullable: false
        -
          in: query
          name: page
          description: 'optional Page number for pagination. Default: 1.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'optional Page number for pagination. Default: 1.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'optional Number of orders per page (max 50). Default: 15.'
          example: 20
          required: false
          schema:
            type: integer
            description: 'optional Number of orders per page (max 50). Default: 15.'
            example: 20
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Success with orders'
                    type: object
                    example:
                      message: 'Orders retrieved successfully.'
                      data:
                        data:
                          -
                            id: 1
                            total_amount: 29.99
                            total_amount_formatted: £29.99
                            created_at: '2025-01-15T10:30:00.000000Z'
                            updated_at: '2025-01-15T10:35:00.000000Z'
                            deleted_at: null
                            user:
                              id: 5
                              name: 'John Smith'
                              email: john.smith@example.com
                              email_verified_at: '2025-01-10T08:00:00.000000Z'
                            status:
                              id: 2
                              name: Processing
                            order_items:
                              -
                                id: 1
                                quantity: 2
                                price: 1499
                                price_formatted: £14.99
                                line_total: 2998
                                line_total_formatted: £29.98
                                product:
                                  id: 10
                                  name: 'Wireless Headphones'
                                  description: 'High-quality wireless headphones with noise cancellation'
                                product_variant:
                                  id: 3
                                  value: Black
                                  additional_price: 0
                                  product_attribute:
                                    id: 1
                                    name: Color
                                order_return: null
                            payments:
                              -
                                id: 1
                                amount: 2999
                                amount_formatted: £29.99
                                status: Paid
                                method: stripe
                                transaction_reference: pi_1234567890abcdef
                                processed_at: '2025-01-15T10:32:00.000000Z'
                        current_page: 1
                        per_page: 15
                        total: 42
                        last_page: 3
                        from: 1
                        to: 15
                    properties:
                      message:
                        type: string
                        example: 'Orders retrieved successfully.'
                      data:
                        type: object
                        properties:
                          data:
                            type: array
                            example:
                              -
                                id: 1
                                total_amount: 29.99
                                total_amount_formatted: £29.99
                                created_at: '2025-01-15T10:30:00.000000Z'
                                updated_at: '2025-01-15T10:35:00.000000Z'
                                deleted_at: null
                                user:
                                  id: 5
                                  name: 'John Smith'
                                  email: john.smith@example.com
                                  email_verified_at: '2025-01-10T08:00:00.000000Z'
                                status:
                                  id: 2
                                  name: Processing
                                order_items:
                                  -
                                    id: 1
                                    quantity: 2
                                    price: 1499
                                    price_formatted: £14.99
                                    line_total: 2998
                                    line_total_formatted: £29.98
                                    product:
                                      id: 10
                                      name: 'Wireless Headphones'
                                      description: 'High-quality wireless headphones with noise cancellation'
                                    product_variant:
                                      id: 3
                                      value: Black
                                      additional_price: 0
                                      product_attribute: { id: 1, name: Color }
                                    order_return: null
                                payments:
                                  -
                                    id: 1
                                    amount: 2999
                                    amount_formatted: £29.99
                                    status: Paid
                                    method: stripe
                                    transaction_reference: pi_1234567890abcdef
                                    processed_at: '2025-01-15T10:32:00.000000Z'
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                total_amount:
                                  type: number
                                  example: 29.99
                                total_amount_formatted:
                                  type: string
                                  example: £29.99
                                created_at:
                                  type: string
                                  example: '2025-01-15T10:30:00.000000Z'
                                updated_at:
                                  type: string
                                  example: '2025-01-15T10:35:00.000000Z'
                                deleted_at:
                                  type: string
                                  example: null
                                user:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 5
                                    name:
                                      type: string
                                      example: 'John Smith'
                                    email:
                                      type: string
                                      example: john.smith@example.com
                                    email_verified_at:
                                      type: string
                                      example: '2025-01-10T08:00:00.000000Z'
                                status:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 2
                                    name:
                                      type: string
                                      example: Processing
                                order_items:
                                  type: array
                                  example:
                                    -
                                      id: 1
                                      quantity: 2
                                      price: 1499
                                      price_formatted: £14.99
                                      line_total: 2998
                                      line_total_formatted: £29.98
                                      product: { id: 10, name: 'Wireless Headphones', description: 'High-quality wireless headphones with noise cancellation' }
                                      product_variant: { id: 3, value: Black, additional_price: 0, product_attribute: { id: 1, name: Color } }
                                      order_return: null
                                  items:
                                    type: object
                                    properties:
                                      id: { type: integer, example: 1 }
                                      quantity: { type: integer, example: 2 }
                                      price: { type: integer, example: 1499 }
                                      price_formatted: { type: string, example: £14.99 }
                                      line_total: { type: integer, example: 2998 }
                                      line_total_formatted: { type: string, example: £29.98 }
                                      product: { type: object, properties: { id: { type: integer, example: 10 }, name: { type: string, example: 'Wireless Headphones' }, description: { type: string, example: 'High-quality wireless headphones with noise cancellation' } } }
                                      product_variant: { type: object, properties: { id: { type: integer, example: 3 }, value: { type: string, example: Black }, additional_price: { type: integer, example: 0 }, product_attribute: { type: object, properties: { id: { type: integer, example: 1 }, name: { type: string, example: Color } } } } }
                                      order_return: { type: string, example: null }
                                payments:
                                  type: array
                                  example:
                                    -
                                      id: 1
                                      amount: 2999
                                      amount_formatted: £29.99
                                      status: Paid
                                      method: stripe
                                      transaction_reference: pi_1234567890abcdef
                                      processed_at: '2025-01-15T10:32:00.000000Z'
                                  items:
                                    type: object
                                    properties:
                                      id: { type: integer, example: 1 }
                                      amount: { type: integer, example: 2999 }
                                      amount_formatted: { type: string, example: £29.99 }
                                      status: { type: string, example: Paid }
                                      method: { type: string, example: stripe }
                                      transaction_reference: { type: string, example: pi_1234567890abcdef }
                                      processed_at: { type: string, example: '2025-01-15T10:32:00.000000Z' }
                          current_page:
                            type: integer
                            example: 1
                          per_page:
                            type: integer
                            example: 15
                          total:
                            type: integer
                            example: 42
                          last_page:
                            type: integer
                            example: 3
                          from:
                            type: integer
                            example: 1
                          to:
                            type: integer
                            example: 15
                  -
                    description: 'No orders found'
                    type: object
                    example:
                      message: 'Orders retrieved successfully.'
                      data:
                        data: []
                        current_page: 1
                        per_page: 15
                        total: 0
                        last_page: 1
                        from: null
                        to: null
                    properties:
                      message:
                        type: string
                        example: 'Orders retrieved successfully.'
                      data:
                        type: object
                        properties:
                          data:
                            type: array
                            example: []
                          current_page:
                            type: integer
                            example: 1
                          per_page:
                            type: integer
                            example: 15
                          total:
                            type: integer
                            example: 0
                          last_page:
                            type: integer
                            example: 1
                          from:
                            type: string
                            example: null
                          to:
                            type: string
                            example: null
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        422:
          description: 'Invalid filter parameters'
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    - 'The user id field must be an integer.'
                    - 'The status id field must exist in order_statuses table.'
                properties:
                  errors:
                    type: array
                    example:
                      - 'The user id field must be an integer.'
                      - 'The status id field must exist in order_statuses table.'
                    items:
                      type: string
      tags:
        - 'Order Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
                status_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the order_statuses table.'
                  example: null
                  nullable: true
  '/api/orders/{id}':
    get:
      summary: 'Retrieve a specific order'
      operationId: retrieveASpecificOrder
      description: "Get detailed information about a specific order including all order items, user details,\npayment information, and any associated returns or refunds."
      parameters: []
      responses:
        200:
          description: 'Order found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order retrieved successfully.'
                  data:
                    id: 43
                    total_amount: 5998
                    total_amount_formatted: £59.98
                    created_at: '2025-01-15T14:20:00.000000Z'
                    updated_at: '2025-01-15T14:25:00.000000Z'
                    deleted_at: null
                    user:
                      id: 5
                      name: 'John Smith'
                      email: john.smith@example.com
                      email_verified_at: '2025-01-10T08:00:00.000000Z'
                    status:
                      id: 3
                      name: Confirmed
                    order_items:
                      -
                        id: 85
                        quantity: 2
                        price: 1499
                        price_formatted: £14.99
                        line_total: 2998
                        line_total_formatted: £29.98
                        created_at: '2025-01-15T14:20:00.000000Z'
                        product:
                          id: 10
                          name: 'Wireless Headphones'
                          description: 'High-quality wireless headphones with noise cancellation'
                          price: 1499
                          price_formatted: £14.99
                        product_variant:
                          id: 3
                          value: Black
                          additional_price: 0
                          product_attribute:
                            id: 1
                            name: Color
                        order_return:
                          id: 12
                          reason: 'Product arrived damaged'
                          status:
                            id: 1
                            name: Requested
                          created_at: '2025-01-16T09:15:00.000000Z'
                      -
                        id: 86
                        quantity: 1
                        price: 2999
                        price_formatted: £29.99
                        line_total: 2999
                        line_total_formatted: £29.99
                        created_at: '2025-01-15T14:20:00.000000Z'
                        product:
                          id: 15
                          name: 'Bluetooth Speaker'
                          description: 'Portable waterproof Bluetooth speaker'
                          price: 2999
                          price_formatted: £29.99
                        product_variant: null
                        order_return: null
                    payments:
                      -
                        id: 25
                        amount: 5998
                        amount_formatted: £59.98
                        status: Paid
                        method: stripe
                        transaction_reference: pi_1234567890abcdef
                        processed_at: '2025-01-15T14:22:00.000000Z'
                        created_at: '2025-01-15T14:21:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Order retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 43
                      total_amount:
                        type: integer
                        example: 5998
                      total_amount_formatted:
                        type: string
                        example: £59.98
                      created_at:
                        type: string
                        example: '2025-01-15T14:20:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T14:25:00.000000Z'
                      deleted_at:
                        type: string
                        example: null
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 5
                          name:
                            type: string
                            example: 'John Smith'
                          email:
                            type: string
                            example: john.smith@example.com
                          email_verified_at:
                            type: string
                            example: '2025-01-10T08:00:00.000000Z'
                      status:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 3
                          name:
                            type: string
                            example: Confirmed
                      order_items:
                        type: array
                        example:
                          -
                            id: 85
                            quantity: 2
                            price: 1499
                            price_formatted: £14.99
                            line_total: 2998
                            line_total_formatted: £29.98
                            created_at: '2025-01-15T14:20:00.000000Z'
                            product:
                              id: 10
                              name: 'Wireless Headphones'
                              description: 'High-quality wireless headphones with noise cancellation'
                              price: 1499
                              price_formatted: £14.99
                            product_variant:
                              id: 3
                              value: Black
                              additional_price: 0
                              product_attribute:
                                id: 1
                                name: Color
                            order_return:
                              id: 12
                              reason: 'Product arrived damaged'
                              status:
                                id: 1
                                name: Requested
                              created_at: '2025-01-16T09:15:00.000000Z'
                          -
                            id: 86
                            quantity: 1
                            price: 2999
                            price_formatted: £29.99
                            line_total: 2999
                            line_total_formatted: £29.99
                            created_at: '2025-01-15T14:20:00.000000Z'
                            product:
                              id: 15
                              name: 'Bluetooth Speaker'
                              description: 'Portable waterproof Bluetooth speaker'
                              price: 2999
                              price_formatted: £29.99
                            product_variant: null
                            order_return: null
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 85
                            quantity:
                              type: integer
                              example: 2
                            price:
                              type: integer
                              example: 1499
                            price_formatted:
                              type: string
                              example: £14.99
                            line_total:
                              type: integer
                              example: 2998
                            line_total_formatted:
                              type: string
                              example: £29.98
                            created_at:
                              type: string
                              example: '2025-01-15T14:20:00.000000Z'
                            product:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 10
                                name:
                                  type: string
                                  example: 'Wireless Headphones'
                                description:
                                  type: string
                                  example: 'High-quality wireless headphones with noise cancellation'
                                price:
                                  type: integer
                                  example: 1499
                                price_formatted:
                                  type: string
                                  example: £14.99
                            product_variant:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 3
                                value:
                                  type: string
                                  example: Black
                                additional_price:
                                  type: integer
                                  example: 0
                                product_attribute:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: Color
                            order_return:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 12
                                reason:
                                  type: string
                                  example: 'Product arrived damaged'
                                status:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: Requested
                                created_at:
                                  type: string
                                  example: '2025-01-16T09:15:00.000000Z'
                      payments:
                        type: array
                        example:
                          -
                            id: 25
                            amount: 5998
                            amount_formatted: £59.98
                            status: Paid
                            method: stripe
                            transaction_reference: pi_1234567890abcdef
                            processed_at: '2025-01-15T14:22:00.000000Z'
                            created_at: '2025-01-15T14:21:00.000000Z'
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 25
                            amount:
                              type: integer
                              example: 5998
                            amount_formatted:
                              type: string
                              example: £59.98
                            status:
                              type: string
                              example: Paid
                            method:
                              type: string
                              example: stripe
                            transaction_reference:
                              type: string
                              example: pi_1234567890abcdef
                            processed_at:
                              type: string
                              example: '2025-01-15T14:22:00.000000Z'
                            created_at:
                              type: string
                              example: '2025-01-15T14:21:00.000000Z'
        403:
          description: 'Insufficient permissions'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\Order] 999'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 999'
      tags:
        - 'Order Management'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the order.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: order
        description: 'The ID of the order to retrieve.'
        example: 43
        required: true
        schema:
          type: integer
  '/api/payments/{gateway}/create':
    post:
      summary: 'Create or retrieve payment intent'
      operationId: createOrRetrievePaymentIntent
      description: "Creates a new Stripe PaymentIntent for the specified order, or returns an existing one if already created.\nThis prevents duplicate payment intents for the same order. The client secret returned should be used\non the frontend to complete the payment with Stripe's client-side libraries."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'New PaymentIntent created'
                    type: object
                    example:
                      status: true
                      message: 'PaymentIntent created successfully.'
                      data:
                        client_secret: pi_1234567890abcdef_secret_xyz789abc123
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'PaymentIntent created successfully.'
                      data:
                        type: object
                        properties:
                          client_secret:
                            type: string
                            example: pi_1234567890abcdef_secret_xyz789abc123
                  -
                    description: 'Existing PaymentIntent retrieved'
                    type: object
                    example:
                      status: true
                      message: 'Existing PaymentIntent retrieved.'
                      data:
                        client_secret: pi_1234567890abcdef_secret_xyz789abc123
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Existing PaymentIntent retrieved.'
                      data:
                        type: object
                        properties:
                          client_secret:
                            type: string
                            example: pi_1234567890abcdef_secret_xyz789abc123
                  -
                    description: 'Order already paid'
                    type: object
                    example:
                      status: true
                      message: 'Payment has already been processed for this order.'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Payment has already been processed for this order.'
                      data:
                        type: string
                        example: null
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Unsupported gateway'
                    type: object
                    example:
                      status: false
                      message: 'Unsupported payment gateway'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: 'Unsupported payment gateway'
                      data:
                        type: string
                        example: null
                  -
                    description: 'Order not eligible for payment'
                    type: object
                    example:
                      status: false
                      message: 'Order has already been paid or is not in a payable state.'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: 'Order has already been paid or is not in a payable state.'
                      data:
                        type: string
                        example: null
        404:
          description: 'Order not found'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: false
                  message: 'No query results for model [App\Models\Order] 999'
                  data: null
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'No query results for model [App\Models\Order] 999'
                  data:
                    type: string
                    example: null
        422:
          description: 'Invalid order data'
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    - 'The order id field is required.'
                    - 'The order id must be an integer.'
                    - 'The selected order id is invalid.'
                properties:
                  errors:
                    type: array
                    example:
                      - 'The order id field is required.'
                      - 'The order id must be an integer.'
                      - 'The selected order id is invalid.'
                    items:
                      type: string
        500:
          description: 'Stripe API error'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: false
                  message: 'Unable to create payment intent with Stripe. Please try again.'
                  data: null
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Unable to create payment intent with Stripe. Please try again.'
                  data:
                    type: string
                    example: null
      tags:
        - 'Payment Processing'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_id:
                  type: integer
                  description: 'The ID of the order to create payment for. Must be a valid, unpaid order.'
                  example: 123
                  nullable: false
              required:
                - order_id
    parameters:
      -
        in: path
        name: gateway
        description: 'The payment gateway to use. Currently only "stripe" is supported.'
        example: stripe
        required: true
        schema:
          type: string
  '/api/payments/{gateway}/verify':
    post:
      summary: 'Verify payment status'
      operationId: verifyPaymentStatus
      description: "Manually verifies the status of a payment with Stripe and updates the local database accordingly.\nThis is useful for handling cases where webhooks might have failed or been delayed.\nIt fetches the latest payment status directly from Stripe and synchronizes it with your database."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Payment verified as successful'
                    type: object
                    example:
                      status: true
                      message: 'Payment verified'
                      data:
                        payment_status: Paid
                        order_status: Confirmed
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Payment verified'
                      data:
                        type: object
                        properties:
                          payment_status:
                            type: string
                            example: Paid
                          order_status:
                            type: string
                            example: Confirmed
                  -
                    description: 'Payment still pending'
                    type: object
                    example:
                      status: true
                      message: 'Payment verified'
                      data:
                        payment_status: Pending
                        order_status: 'Pending Payment'
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Payment verified'
                      data:
                        type: object
                        properties:
                          payment_status:
                            type: string
                            example: Pending
                          order_status:
                            type: string
                            example: 'Pending Payment'
                  -
                    description: 'Payment failed'
                    type: object
                    example:
                      status: true
                      message: 'Payment verified'
                      data:
                        payment_status: Failed
                        order_status: Failed
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Payment verified'
                      data:
                        type: object
                        properties:
                          payment_status:
                            type: string
                            example: Failed
                          order_status:
                            type: string
                            example: Failed
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Unsupported gateway'
                    type: object
                    example:
                      status: false
                      message: 'Unsupported payment gateway'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: 'Unsupported payment gateway'
                      data:
                        type: string
                        example: null
                  -
                    description: 'Payment amount mismatch'
                    type: object
                    example:
                      status: false
                      message: 'Payment amount mismatch'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: 'Payment amount mismatch'
                      data:
                        type: string
                        example: null
        404:
          description: 'Payment not found in database'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: false
                  message: 'Payment not found'
                  data: null
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Payment not found'
                  data:
                    type: string
                    example: null
        422:
          description: 'Validation errors'
          content:
            application/json:
              schema:
                type: object
                example:
                  errors:
                    - 'The payment intent id field is required.'
                    - 'The payment intent id format is invalid. Must be a valid Stripe payment intent ID.'
                    - 'The order id field is required.'
                    - 'The selected order id is invalid.'
                properties:
                  errors:
                    type: array
                    example:
                      - 'The payment intent id field is required.'
                      - 'The payment intent id format is invalid. Must be a valid Stripe payment intent ID.'
                      - 'The order id field is required.'
                      - 'The selected order id is invalid.'
                    items:
                      type: string
        500:
          description: 'Stripe API error'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: false
                  message: "Unable to retrieve payment from Stripe: No such payment_intent: 'pi_invalid'"
                  data: null
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unable to retrieve payment from Stripe: No such payment_intent: 'pi_invalid'"
                  data:
                    type: string
                    example: null
      tags:
        - 'Payment Processing'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment_intent_id:
                  type: string
                  description: 'The Stripe PaymentIntent ID to verify. Must be a valid Stripe PaymentIntent ID format.'
                  example: pi_1234567890abcdef
                  nullable: false
                order_id:
                  type: integer
                  description: 'The ID of the order associated with this payment for verification.'
                  example: 123
                  nullable: false
              required:
                - payment_intent_id
                - order_id
    parameters:
      -
        in: path
        name: gateway
        description: 'The payment gateway used. Currently only "stripe" is supported.'
        example: stripe
        required: true
        schema:
          type: string
  /api/admin/payments:
    get:
      summary: 'Retrieve paginated list of payments.'
      operationId: retrievePaginatedListOfPayments
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Payments retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Payments retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Payment
  /api/admin/payment-methods:
    get:
      summary: 'Retrieve all payment methods.'
      operationId: retrieveAllPaymentMethods
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Payment Methods retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Payment Methods retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Payment Methods'
    post:
      summary: 'Create a new payment method.'
      operationId: createANewPaymentMethod
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Payment Method created successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Payment Method created successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Payment Methods'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the payment method.'
                  example: '"Google Pay"'
                  nullable: false
              required:
                - name
  '/api/admin/payment-methods/{paymentMethod_id}':
    post:
      summary: 'Update a payment method.'
      operationId: updateAPaymentMethod
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Payment Method updated successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Payment Method updated successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Payment Methods'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the payment method.'
                  example: '"Google Pay"'
                  nullable: false
              required:
                - name
    delete:
      summary: 'Delete a permission.'
      operationId: deleteAPermission
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Payment Method deleted successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Payment Method deleted successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Payment Methods'
    parameters:
      -
        in: path
        name: paymentMethod_id
        description: 'The ID of the paymentMethod.'
        example: 1
        required: true
        schema:
          type: integer
  /api/payments/stripe/webhook:
    post:
      summary: 'Stripe webhook listener'
      operationId: stripeWebhookListener
      description: "This endpoint receives webhook events from Stripe when payment-related events occur.\nIt automatically processes payment status updates, handles refunds, and manages order status changes.\nThis endpoint is called directly by Stripe's servers and requires proper webhook signature verification.\n\n**Important**: This endpoint should be excluded from CSRF protection and rate limiting."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Webhook processed successfully'
                    type: object
                    example:
                      status: true
                      message: 'Webhook update.'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Webhook update.'
                      data:
                        type: string
                        example: null
                  -
                    description: 'Payment success webhook'
                    type: object
                    example:
                      status: true
                      message: 'Payment success webhook processed.'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'Payment success webhook processed.'
                      data:
                        type: string
                        example: null
                  -
                    description: 'Refund webhook processed'
                    type: object
                    example:
                      status: true
                      message: 'External refund processed.'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: true
                      message:
                        type: string
                        example: 'External refund processed.'
                      data:
                        type: string
                        example: null
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: 'Invalid Stripe signature'
                    type: object
                    example:
                      status: false
                      message: 'Invalid Stripe signature'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: 'Invalid Stripe signature'
                      data:
                        type: string
                        example: null
                  -
                    description: 'Invalid payload format'
                    type: object
                    example:
                      status: false
                      message: 'Invalid payload'
                      data: null
                    properties:
                      status:
                        type: boolean
                        example: false
                      message:
                        type: string
                        example: 'Invalid payload'
                      data:
                        type: string
                        example: null
        500:
          description: 'Webhook processing error'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: false
                  message: 'An error occurred while processing the webhook.'
                  data: null
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'An error occurred while processing the webhook.'
                  data:
                    type: string
                    example: null
      tags:
        - 'Payment Webhooks'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: 'The unique identifier for the webhook event.'
                  example: evt_1234567890abcdef
                  nullable: false
                object:
                  type: string
                  description: 'Always "event" for webhook events.'
                  example: event
                  nullable: false
                type:
                  type: string
                  description: 'The type of event (e.g., payment_intent.succeeded, charge.refunded).'
                  example: payment_intent.succeeded
                  nullable: false
                data:
                  type: object
                  description: 'The event data containing the relevant object (payment_intent, charge, etc.).'
                  example: []
                  nullable: false
                  properties:
                    object:
                      type: object
                      description: 'The main object for this event (PaymentIntent, Charge, Refund, etc.).'
                      example: []
                      nullable: false
                      properties: {  }
                created:
                  type: integer
                  description: 'Unix timestamp when the event was created.'
                  example: 1640995200
                  nullable: false
                livemode:
                  type: boolean
                  description: 'Whether this event is from live mode (true) or test mode (false).'
                  example: false
                  nullable: false
              required:
                - id
                - object
                - type
                - data
                - created
                - livemode
      security: []
  /api/admin/permissions:
    get:
      summary: 'Retrieve all permissions.'
      operationId: retrieveAllPermissions
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permissions retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Permissions retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Permissions
    post:
      summary: 'Create a new permission.'
      operationId: createANewPermission
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permission created successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Permission created successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the permission.'
                  example: '"create-vendor"'
                  nullable: false
              required:
                - name
  '/api/admin/permissions/{id}':
    post:
      summary: 'Update a permission.'
      operationId: updateAPermission
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permission updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Permission updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The updated name of the permission.'
                  example: '"create-vendor"'
                  nullable: false
              required:
                - name
    delete:
      summary: 'Delete a permission.'
      operationId: deleteAPermission
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permission deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Permission deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Permissions
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the permission.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/product-categories:
    get:
      summary: 'Get all product categories'
      operationId: getAllProductCategories
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Categories retrieved successfully.'
                  data:
                    -
                      id: 1
                      name: Electronics
                      children: []
                properties:
                  message:
                    type: string
                    example: 'Categories retrieved successfully.'
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: Electronics
                        children: []
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Electronics
                        children:
                          type: array
                          example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Category'
    post:
      summary: 'Store a new product category'
      operationId: storeANewProductCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Category created successfully.'
                  data:
                    id: 2
                    name: Laptops
                    parent_id: 1
                properties:
                  message:
                    type: string
                    example: 'Category created successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Laptops
                      parent_id:
                        type: integer
                        example: 1
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Category'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the category.'
                  example: architecto
                  nullable: false
                parent_id:
                  type: integer
                  description: 'optional The ID of the parent category.'
                  example: 16
                  nullable: true
              required:
                - name
  '/api/admin/product-categories/{productCategory_id}':
    get:
      summary: 'Get a specific product category'
      operationId: getASpecificProductCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Category retrieved successfully.'
                  data:
                    id: 1
                    name: Electronics
                    children: []
                properties:
                  message:
                    type: string
                    example: 'Category retrieved successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: Electronics
                      children:
                        type: array
                        example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Category'
    post:
      summary: 'Update a product category'
      operationId: updateAProductCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Category updated successfully.'
                  data:
                    id: 1
                    name: 'Updated Category Name'
                    parent_id: null
                properties:
                  message:
                    type: string
                    example: 'Category updated successfully.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'Updated Category Name'
                      parent_id:
                        type: string
                        example: null
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Category'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the category.'
                  example: architecto
                  nullable: false
                parent_id:
                  type: integer
                  description: 'optional The ID of the parent category.'
                  example: 16
                  nullable: true
              required:
                - name
    delete:
      summary: 'Delete a product category'
      operationId: deleteAProductCategory
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Category deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Category deleted successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Cannot delete a category with subcategories'
                properties:
                  message:
                    type: string
                    example: 'Cannot delete a category with subcategories'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Product Category'
    parameters:
      -
        in: path
        name: productCategory_id
        description: 'The ID of the productCategory.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/products:
    get:
      summary: 'Retrieve a paginated list of products.'
      operationId: retrieveAPaginatedListOfProducts
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Products retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Products retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  type: object
                  description: ''
                  example: null
                  nullable: false
                  properties:
                    name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: b
                      nullable: false
                    price:
                      type: string
                      description: 'Must match the regex /^\d+(\.\d{1,2})?(,\d+(\.\d{1,2})?)*$/.'
                      example: '9,3.1)'
                      nullable: false
                    category:
                      type: string
                      description: 'Must match the regex /^(\d,?)+$/.'
                      example: '9,31'
                      nullable: false
                    quantity:
                      type: integer
                      description: 'Must be at least 0.'
                      example: 8
                      nullable: false
                    created_at:
                      type: string
                      description: 'Must match the regex /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/.'
                      example: '2559-31-42'
                      nullable: false
                    updated_at:
                      type: string
                      description: 'Must match the regex /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/.'
                      example: '2559-31-42'
                      nullable: false
                    search:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: h
                      nullable: false
                    include:
                      type: string
                      description: 'Must match the regex /^(\w+(,\w+)*)?$/.'
                      example: 'uw,pw,lvq,wrsitc,pscqld,zsnrwt,ujwv'
                      nullable: false
                page:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 4
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 9
                  nullable: false
                sort:
                  type: string
                  description: 'Must match the regex /^(-?[a-zA-Z0-9_]+)(,-?[a-zA-Z0-9_]+)*$/.'
                  example: 'y8p,Bm,-dp,-Zm,-GH'
                  nullable: false
    post:
      summary: 'Create a new product.'
      operationId: createANewProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product created successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Product created successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Eius et animi quos velit et.'
                  nullable: true
                price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 60
                  nullable: false
                product_category_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the product_categories table.'
                  example: architecto
                  nullable: false
                product_status_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the product_statuses table.'
                  example: architecto
                  nullable: false
                quantity:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 39
                  nullable: false
                product_tags:
                  type: array
                  description: 'The <code>id</code> of an existing record in the product_tags table.'
                  example: null
                  items:
                    type: string
                product_variants:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: object
                    properties:
                      product_attribute_id:
                        type: string
                        description: 'The <code>id</code> of an existing record in the product_attributes table.'
                        example: architecto
                        nullable: false
                      value:
                        type: string
                        description: 'This field is required when <code>product_variants</code> is present. Must not be greater than 255 characters.'
                        example: 'n'
                        nullable: false
                      additional_price:
                        type: number
                        description: 'Must be at least 0.'
                        example: 84
                        nullable: true
                      quantity:
                        type: integer
                        description: 'Must be at least 0.'
                        example: 12
                        nullable: false
                    required:
                      - product_attribute_id
                      - quantity
                media:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    featured_image:
                      type: string
                      format: binary
                      description: 'Must be a file. Must be an image. Must not be greater than 5120 kilobytes.'
                      nullable: true
                    gallery:
                      type: array
                      description: 'Must be a file. Must be an image. Must not be greater than 5120 kilobytes.'
                      items:
                        type: string
                        format: binary
              required:
                - name
                - price
                - product_category_id
                - product_status_id
                - quantity
  '/api/admin/products/{id}':
    get:
      summary: 'Retrieve a specific product.'
      operationId: retrieveASpecificProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product retrieved successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Product retrieved successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
    post:
      summary: 'Update an existing product.'
      operationId: updateAnExistingProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Product updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Eius et animi quos velit et.'
                  nullable: true
                price:
                  type: number
                  description: 'Must be at least 0.'
                  example: 60
                  nullable: false
                product_category_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the product_categories table.'
                  example: architecto
                  nullable: false
                product_status_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the product_statuses table.'
                  example: architecto
                  nullable: false
                quantity:
                  type: integer
                  description: 'Must be at least 0.'
                  example: 39
                  nullable: false
                product_tags:
                  type: array
                  description: 'The <code>id</code> of an existing record in the product_tags table.'
                  example: null
                  items:
                    type: string
                product_variants:
                  type: array
                  description: ''
                  example: null
                  items:
                    type: object
                    properties:
                      product_attribute_id:
                        type: string
                        description: 'The <code>id</code> of an existing record in the product_attributes table.'
                        example: architecto
                        nullable: false
                      value:
                        type: string
                        description: 'This field is required when <code>product_variants</code> is present. Must not be greater than 255 characters.'
                        example: 'n'
                        nullable: false
                      additional_price:
                        type: number
                        description: 'Must be at least 0.'
                        example: 84
                        nullable: true
                      quantity:
                        type: integer
                        description: 'Must be at least 0.'
                        example: 12
                        nullable: false
                    required:
                      - product_attribute_id
                      - quantity
                media:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    featured_image:
                      type: string
                      format: binary
                      description: 'Must be a file. Must be an image. Must not be greater than 5120 kilobytes.'
                      nullable: true
                    gallery:
                      type: array
                      description: 'Must be a file. Must be an image. Must not be greater than 5120 kilobytes.'
                      items:
                        type: string
                        format: binary
              required:
                - name
                - price
                - product_category_id
                - product_status_id
                - quantity
    delete:
      summary: 'Permanently delete a product.'
      operationId: permanentlyDeleteAProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Product deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/admin/products/soft-destroy/{product_id}':
    delete:
      summary: 'Soft delete a product.'
      operationId: softDeleteAProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Product deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
    parameters:
      -
        in: path
        name: product_id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/admin/products/{id}/restore':
    patch:
      summary: 'Restore a soft deleted product.'
      operationId: restoreASoftDeletedProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product restored successfully.'
                properties:
                  message:
                    type: string
                    example: 'Product restored successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  /api/products:
    get:
      summary: 'Retrieve a paginated list of products.'
      operationId: retrieveAPaginatedListOfProducts
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Products retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Products retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  type: object
                  description: ''
                  example: null
                  nullable: false
                  properties:
                    name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: b
                      nullable: false
                    price:
                      type: string
                      description: 'Must match the regex /^\d+(\.\d{1,2})?(,\d+(\.\d{1,2})?)*$/.'
                      example: '9,3.1)'
                      nullable: false
                    category:
                      type: string
                      description: 'Must match the regex /^(\d,?)+$/.'
                      example: '9,31'
                      nullable: false
                    quantity:
                      type: integer
                      description: 'Must be at least 0.'
                      example: 8
                      nullable: false
                    created_at:
                      type: string
                      description: 'Must match the regex /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/.'
                      example: '2559-31-42'
                      nullable: false
                    updated_at:
                      type: string
                      description: 'Must match the regex /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/.'
                      example: '2559-31-42'
                      nullable: false
                    search:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: h
                      nullable: false
                    include:
                      type: string
                      description: 'Must match the regex /^(\w+(,\w+)*)?$/.'
                      example: 'uw,pw,lvq,wrsitc,pscqld,zsnrwt,ujwv'
                      nullable: false
                page:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 4
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 9
                  nullable: false
                sort:
                  type: string
                  description: 'Must match the regex /^(-?[a-zA-Z0-9_]+)(,-?[a-zA-Z0-9_]+)*$/.'
                  example: 'y8p,Bm,-dp,-Zm,-GH'
                  nullable: false
  '/api/products/{id}':
    get:
      summary: 'Retrieve a specific product.'
      operationId: retrieveASpecificProduct
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Product retrieved successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Product retrieved successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Products
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/refunds:
    get:
      summary: 'Retrieve a paginated list of all refund records.'
      operationId: retrieveAPaginatedListOfAllRefundRecords
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Refunds retrieved successfully.'
                  data:
                    data:
                      -
                        id: 1
                        amount: 2999
                        processed_at: '2025-01-15T14:45:00.000000Z'
                        notes: 'Refund processed for damaged product'
                        created_at: '2025-01-15T14:45:00.000000Z'
                        updated_at: '2025-01-15T14:45:00.000000Z'
                        status:
                          id: 1
                          name: Refunded
                        order_return:
                          id: 15
                          reason: 'Product damaged on arrival'
                          order_item:
                            id: 25
                            product:
                              id: 12
                              name: 'Wireless Headphones'
                            order:
                              id: 8
                              total_amount: 5998
                              user:
                                id: 3
                                email: customer@example.com
                    current_page: 1
                    per_page: 20
                    total: 32
                properties:
                  message:
                    type: string
                    example: 'Refunds retrieved successfully.'
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        example:
                          -
                            id: 1
                            amount: 2999
                            processed_at: '2025-01-15T14:45:00.000000Z'
                            notes: 'Refund processed for damaged product'
                            created_at: '2025-01-15T14:45:00.000000Z'
                            updated_at: '2025-01-15T14:45:00.000000Z'
                            status:
                              id: 1
                              name: Refunded
                            order_return:
                              id: 15
                              reason: 'Product damaged on arrival'
                              order_item:
                                id: 25
                                product:
                                  id: 12
                                  name: 'Wireless Headphones'
                                order:
                                  id: 8
                                  total_amount: 5998
                                  user:
                                    id: 3
                                    email: customer@example.com
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            amount:
                              type: integer
                              example: 2999
                            processed_at:
                              type: string
                              example: '2025-01-15T14:45:00.000000Z'
                            notes:
                              type: string
                              example: 'Refund processed for damaged product'
                            created_at:
                              type: string
                              example: '2025-01-15T14:45:00.000000Z'
                            updated_at:
                              type: string
                              example: '2025-01-15T14:45:00.000000Z'
                            status:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
                                  example: Refunded
                            order_return:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 15
                                reason:
                                  type: string
                                  example: 'Product damaged on arrival'
                                order_item:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 25
                                    product:
                                      type: object
                                      properties: { id: { type: integer, example: 12 }, name: { type: string, example: 'Wireless Headphones' } }
                                    order:
                                      type: object
                                      properties: { id: { type: integer, example: 8 }, total_amount: { type: integer, example: 5998 }, user: { type: object, properties: { id: { type: integer, example: 3 }, email: { type: string, example: customer@example.com } } } }
                      current_page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 32
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Refunds
  '/api/admin/refunds/{gateway}/{id}':
    post:
      summary: 'Process a refund for an approved return through the specified payment gateway.'
      operationId: processARefundForAnApprovedReturnThroughTheSpecifiedPaymentGateway
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Refund processed successfully.'
                properties:
                  message:
                    type: string
                    example: 'Refund processed successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Unsupported payment gateway'
                    properties:
                      message:
                        type: string
                        example: 'Unsupported payment gateway'
                  -
                    description: ''
                    type: object
                    example:
                      message: 'This return has not been approved for refund.'
                    properties:
                      message:
                        type: string
                        example: 'This return has not been approved for refund.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Return request not found.'
                properties:
                  message:
                    type: string
                    example: 'Return request not found.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Refund failed. Please try again later.'
                properties:
                  message:
                    type: string
                    example: 'Refund failed. Please try again later.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'An error occurred while processing the refund.'
                properties:
                  message:
                    type: string
                    example: 'An error occurred while processing the refund.'
      tags:
        - Refunds
    parameters:
      -
        in: path
        name: gateway
        description: 'The payment gateway to process the refund through. Currently supports: stripe.'
        example: stripe
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the return request to refund.'
        example: 15
        required: true
        schema:
          type: integer
  /api/admin/returns:
    get:
      summary: 'Retrieve a paginated list of all return requests.'
      operationId: retrieveAPaginatedListOfAllReturnRequests
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order returns retrieved.'
                  data:
                    data:
                      -
                        id: 1
                        reason: 'Product damaged on arrival'
                        status: Requested
                        created_at: '2025-01-15T10:30:00.000000Z'
                        updated_at: '2025-01-15T10:30:00.000000Z'
                        order_item:
                          id: 25
                          quantity: 2
                          price: 2999
                          product:
                            id: 12
                            name: 'Wireless Headphones'
                            price: 2999
                          order:
                            id: 8
                            total_amount: 5998
                            user:
                              id: 3
                              email: customer@example.com
                    current_page: 1
                    per_page: 20
                    total: 45
                properties:
                  message:
                    type: string
                    example: 'Order returns retrieved.'
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        example:
                          -
                            id: 1
                            reason: 'Product damaged on arrival'
                            status: Requested
                            created_at: '2025-01-15T10:30:00.000000Z'
                            updated_at: '2025-01-15T10:30:00.000000Z'
                            order_item:
                              id: 25
                              quantity: 2
                              price: 2999
                              product:
                                id: 12
                                name: 'Wireless Headphones'
                                price: 2999
                              order:
                                id: 8
                                total_amount: 5998
                                user:
                                  id: 3
                                  email: customer@example.com
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            reason:
                              type: string
                              example: 'Product damaged on arrival'
                            status:
                              type: string
                              example: Requested
                            created_at:
                              type: string
                              example: '2025-01-15T10:30:00.000000Z'
                            updated_at:
                              type: string
                              example: '2025-01-15T10:30:00.000000Z'
                            order_item:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 25
                                quantity:
                                  type: integer
                                  example: 2
                                price:
                                  type: integer
                                  example: 2999
                                product:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 12
                                    name:
                                      type: string
                                      example: 'Wireless Headphones'
                                    price:
                                      type: integer
                                      example: 2999
                                order:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 8
                                    total_amount:
                                      type: integer
                                      example: 5998
                                    user:
                                      type: object
                                      properties: { id: { type: integer, example: 3 }, email: { type: string, example: customer@example.com } }
                      current_page:
                        type: integer
                        example: 1
                      per_page:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 45
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Returns
  '/api/admin/returns/{returnId}/{action}':
    post:
      summary: 'Review and update the status of a return request.'
      operationId: reviewAndUpdateTheStatusOfAReturnRequest
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Return status updated to Approved.'
                  data:
                    id: 15
                    order_item_id: 25
                    reason: 'Product damaged on arrival'
                    order_return_status_id: 3
                    created_at: '2025-01-15T10:30:00.000000Z'
                    updated_at: '2025-01-15T14:45:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Return status updated to Approved.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 15
                      order_item_id:
                        type: integer
                        example: 25
                      reason:
                        type: string
                        example: 'Product damaged on arrival'
                      order_return_status_id:
                        type: integer
                        example: 3
                      created_at:
                        type: string
                        example: '2025-01-15T10:30:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T14:45:00.000000Z'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Return request not found.'
                properties:
                  message:
                    type: string
                    example: 'Return request not found.'
        422:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Return is already processed.'
                    properties:
                      message:
                        type: string
                        example: 'Return is already processed.'
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Invalid action provided.'
                    properties:
                      message:
                        type: string
                        example: 'Invalid action provided.'
      tags:
        - Returns
    parameters:
      -
        in: path
        name: returnId
        description: 'The ID of the return request.'
        example: 15
        required: true
        schema:
          type: integer
      -
        in: path
        name: action
        description: 'The action to perform on the return. Must be one of: review, approve, reject.'
        example: approve
        required: true
        schema:
          type: string
  /api/returns:
    post:
      summary: 'Create a new return request for an order item.'
      operationId: createANewReturnRequestForAnOrderItem
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Orders return created.'
                  data:
                    id: 15
                    reason: "The product arrived damaged and doesn't match the description."
                    status: Requested
                    created_at: '2025-01-15T10:30:00.000000Z'
                    updated_at: '2025-01-15T10:30:00.000000Z'
                properties:
                  message:
                    type: string
                    example: 'Orders return created.'
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 15
                      reason:
                        type: string
                        example: "The product arrived damaged and doesn't match the description."
                      status:
                        type: string
                        example: Requested
                      created_at:
                        type: string
                        example: '2025-01-15T10:30:00.000000Z'
                      updated_at:
                        type: string
                        example: '2025-01-15T10:30:00.000000Z'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You are not authorized to return this item.'
                properties:
                  message:
                    type: string
                    example: 'You are not authorized to return this item.'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Order item not found.'
                properties:
                  message:
                    type: string
                    example: 'Order item not found.'
        409:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'A return request has already been created for this item.'
                properties:
                  message:
                    type: string
                    example: 'A return request has already been created for this item.'
        422:
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  -
                    description: ''
                    type: object
                    example:
                      message: 'Order has not been paid for.'
                    properties:
                      message:
                        type: string
                        example: 'Order has not been paid for.'
                  -
                    description: ''
                    type: object
                    example:
                      message: 'The order item id field is required.'
                      errors:
                        order_item_id:
                          - 'The order item id field is required.'
                        reason:
                          - 'The reason field is required.'
                    properties:
                      message:
                        type: string
                        example: 'The order item id field is required.'
                      errors:
                        type: object
                        properties:
                          order_item_id:
                            type: array
                            example:
                              - 'The order item id field is required.'
                            items:
                              type: string
                          reason:
                            type: array
                            example:
                              - 'The reason field is required.'
                            items:
                              type: string
      tags:
        - Returns
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                order_item_id:
                  type: integer
                  description: 'The ID of the order item to return.'
                  example: 25
                  nullable: false
                reason:
                  type: string
                  description: 'The reason for the return request. Must be between 10 and 500 characters.'
                  example: "The product arrived damaged and doesn't match the description."
                  nullable: false
              required:
                - order_item_id
                - reason
  '/api/admin/roles/{role_id}/permissions':
    get:
      summary: 'Retrieve all permissions for a role.'
      operationId: retrieveAllPermissionsForARole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permissions retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Permissions retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Role Permissions'
    post:
      summary: 'Assign specific permissions to a role.'
      operationId: assignSpecificPermissionsToARole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permissions assigned successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Permissions assigned successfully.'
                  data:
                    type: object
                    properties: {  }
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'The given data was invalid.'
                  errors:
                    permissions:
                      - 'The permissions field is required.'
                properties:
                  message:
                    type: string
                    example: 'The given data was invalid.'
                  errors:
                    type: object
                    properties:
                      permissions:
                        type: array
                        example:
                          - 'The permissions field is required.'
                        items:
                          type: string
      tags:
        - 'Role Permissions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  type: array
                  description: 'List of permission names to assign.'
                  example:
                    - create_users
                    - edit_users
                  items:
                    type: string
              required:
                - permissions
    parameters:
      -
        in: path
        name: role_id
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: role
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/admin/roles/{role_id}/permissions/assign-all':
    post:
      summary: 'Assign all available permissions to a role.'
      operationId: assignAllAvailablePermissionsToARole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'All permissions assigned successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'All permissions assigned successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Role Permissions'
    parameters:
      -
        in: path
        name: role_id
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: role
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/admin/roles/{role_id}/permissions/{permission_id}':
    delete:
      summary: 'Revoke a specific permission from a role.'
      operationId: revokeASpecificPermissionFromARole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Permission revoked successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Permission revoked successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - 'Role Permissions'
    parameters:
      -
        in: path
        name: role_id
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: permission_id
        description: 'The ID of the permission.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: role
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: permission
        description: 'The ID of the permission to revoke.'
        example: 5
        required: true
        schema:
          type: integer
  /api/admin/roles:
    get:
      summary: 'Retrieve all roles.'
      operationId: retrieveAllRoles
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Roles retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Roles retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Roles
    post:
      summary: 'Create a new role.'
      operationId: createANewRole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Role created successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Role created successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the role.'
                  example: '"admin"'
                  nullable: false
              required:
                - name
  '/api/admin/roles/{id}':
    post:
      summary: 'Update a role.'
      operationId: updateARole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Role updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Role updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The updated name of the role.'
                  example: '"admin"'
                  nullable: false
              required:
                - name
    delete:
      summary: 'Delete a role.'
      operationId: deleteARole
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Role deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Role deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Roles
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the role.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/users:
    get:
      summary: 'Retrieve a paginated list of users.'
      operationId: retrieveAPaginatedListOfUsers
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Users retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Users retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                filter:
                  type: object
                  description: ''
                  example: null
                  nullable: false
                  properties:
                    name:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: b
                      nullable: false
                    email:
                      type: string
                      description: 'Must be a valid email address. Must not be greater than 255 characters.'
                      example: zbailey@example.net
                      nullable: false
                    role:
                      type: string
                      description: 'Must match the regex /^(\d,?)+$/.'
                      example: '9,31'
                      nullable: false
                    created_at:
                      type: string
                      description: 'Must match the regex /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/.'
                      example: '2559-31-42'
                      nullable: false
                    updated_at:
                      type: string
                      description: 'Must match the regex /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/.'
                      example: '2559-31-42'
                      nullable: false
                    search:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: h
                      nullable: false
                    include:
                      type: string
                      description: 'Must match the regex /^(\w+(,\w+)*)?$/.'
                      example: 'uw,pw,lvq,wrsitc,pscqld,zsnrwt,ujwv'
                      nullable: false
                page:
                  type: integer
                  description: 'Must be at least 1.'
                  example: 4
                  nullable: false
                per_page:
                  type: integer
                  description: 'Must be at least 1. Must not be greater than 100.'
                  example: 9
                  nullable: false
                sort:
                  type: string
                  description: 'Must match the regex /^(-?[a-zA-Z0-9_]+)(,-?[a-zA-Z0-9_]+)*$/.'
                  example: 'y8p,Bm,-dp,-Zm,-GH'
                  nullable: false
    post:
      summary: 'Create a new user.'
      operationId: createANewUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User created successfully!'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'User created successfully!'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: zbailey@example.net
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '-0pBNvYgxw'
                  nullable: false
                role_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the roles table.'
                  example: architecto
                  nullable: false
                address:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    address_line1:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: 'n'
                      nullable: false
                    city:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: g
                      nullable: false
                    country:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: z
                      nullable: false
                    postal_code:
                      type: string
                      description: 'Must not be greater than 20 characters.'
                      example: miyvdljnikhwaykc
                      nullable: false
                    address_line2:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: m
                      nullable: true
                    state:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: 'y'
                      nullable: true
              required:
                - name
                - email
                - password
                - role_id
  '/api/admin/users/{id}':
    get:
      summary: 'Retrieve a specific user.'
      operationId: retrieveASpecificUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User details retrieved.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'User details retrieved.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
    post:
      summary: 'Update an existing user.'
      operationId: updateAnExistingUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'User updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: zbailey@example.net
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '-0pBNvYgxw'
                  nullable: true
                role_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the roles table.'
                  example: null
                  nullable: false
                address:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    address_line1:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: a
                      nullable: false
                    city:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: 'y'
                      nullable: false
                    country:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: k
                      nullable: false
                    postal_code:
                      type: string
                      description: 'Must not be greater than 20 characters.'
                      example: cmyuwpwlvqwrsitc
                      nullable: false
                    address_line2:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: p
                      nullable: true
                    state:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: s
                      nullable: true
    delete:
      summary: 'Permanently delete a user.'
      operationId: permanentlyDeleteAUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'User deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/users/{id}':
    get:
      summary: 'Retrieve a specific user.'
      operationId: retrieveASpecificUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User details retrieved.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'User details retrieved.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
    post:
      summary: 'Update an existing user.'
      operationId: updateAnExistingUser
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'User updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: zbailey@example.net
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '-0pBNvYgxw'
                  nullable: true
                role_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the roles table.'
                  example: null
                  nullable: false
                address:
                  type: object
                  description: ''
                  example: []
                  nullable: false
                  properties:
                    address_line1:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: a
                      nullable: false
                    city:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: 'y'
                      nullable: false
                    country:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: k
                      nullable: false
                    postal_code:
                      type: string
                      description: 'Must not be greater than 20 characters.'
                      example: cmyuwpwlvqwrsitc
                      nullable: false
                    address_line2:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: p
                      nullable: true
                    state:
                      type: string
                      description: 'Must not be greater than 255 characters.'
                      example: s
                      nullable: true
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: 1
        required: true
        schema:
          type: integer
  /api/admin/vendors:
    get:
      summary: 'Retrieve a paginated list of vendors.'
      operationId: retrieveAPaginatedListOfVendors
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendors retrieved successfully.'
                  data: []
                properties:
                  message:
                    type: string
                    example: 'Vendors retrieved successfully.'
                  data:
                    type: array
                    example: []
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
    post:
      summary: 'Create a new vendor.'
      operationId: createANewVendor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendor created successfully!'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Vendor created successfully!'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: architecto
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: 'n'
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Animi quos velit et fugiat.'
                  nullable: false
                logo:
                  type: string
                  format: binary
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
              required:
                - user_id
                - name
                - description
  '/api/admin/vendors/{id}':
    get:
      summary: 'Retrieve a specific vendor.'
      operationId: retrieveASpecificVendor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendor details retrieved.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Vendor details retrieved.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
    post:
      summary: 'Update an existing vendor.'
      operationId: updateAnExistingVendor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendor updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Vendor updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Et animi quos velit et fugiat.'
                  nullable: false
                logo:
                  type: string
                  format: binary
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
    delete:
      summary: 'Permanently delete a vendor.'
      operationId: permanentlyDeleteAVendor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendor deleted successfully.'
                properties:
                  message:
                    type: string
                    example: 'Vendor deleted successfully.'
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the vendor.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/vendors/{id}':
    get:
      summary: 'Retrieve a specific vendor.'
      operationId: retrieveASpecificVendor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendor details retrieved.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Vendor details retrieved.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
    post:
      summary: 'Update an existing vendor.'
      operationId: updateAnExistingVendor
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Vendor updated successfully.'
                  data: {  }
                properties:
                  message:
                    type: string
                    example: 'Vendor updated successfully.'
                  data:
                    type: object
                    properties: {  }
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You do not have the required permissions.'
                properties:
                  message:
                    type: string
                    example: 'You do not have the required permissions.'
      tags:
        - Vendors
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: false
                name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: b
                  nullable: false
                description:
                  type: string
                  description: 'Must not be greater than 1000 characters.'
                  example: 'Et animi quos velit et fugiat.'
                  nullable: false
                logo:
                  type: string
                  format: binary
                  description: 'Must be an image. Must not be greater than 2048 kilobytes.'
                  nullable: true
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the vendor.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Authentication
    description: ''
  -
    name: 'Email Verification'
    description: ''
  -
    name: 'Product Attributes'
    description: ''
  -
    name: 'Product Tags'
    description: ''
  -
    name: 'Order Management'
    description: ''
  -
    name: 'Payment Processing'
    description: ''
  -
    name: Payment
    description: ''
  -
    name: 'Payment Methods'
    description: ''
  -
    name: 'Payment Webhooks'
    description: ''
  -
    name: Permissions
    description: ''
  -
    name: 'Product Category'
    description: ''
  -
    name: Products
    description: ''
  -
    name: Refunds
    description: ''
  -
    name: Returns
    description: ''
  -
    name: 'Role Permissions'
    description: ''
  -
    name: Roles
    description: ''
  -
    name: Users
    description: ''
  -
    name: Vendors
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can obtain your authentication token by logging in via the `/login` endpoint. The token should be included in the Authorization header as `Bearer {token}`.'
security:
  -
    default: []
